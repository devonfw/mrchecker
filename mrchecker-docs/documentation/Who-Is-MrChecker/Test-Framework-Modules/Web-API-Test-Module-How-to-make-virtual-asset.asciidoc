= How to make a virtual asset

This can be done in four ways:

* Record all traffic (Mappings and Responses) that comes through proxy - by UI
* Record all traffic (Mappings and Responses) that comes through proxy - by Code
* Create Mappings and Responses manually by text files
* Create Mappings and Responses manually by code

== Record all traffic (Mappings and Responses) that comes through proxy - UI

Full article here http://wiremock.org/docs/record-playback/[Wiremock record-playback].

First, start an instance of http://wiremock.org/docs/running-standalone[WireMock running standalone]. Once that’s running, visit the recorder UI page at http://localhost:8080/__admin/recorder (assuming you started WireMock on the default port of 8080).

image::images/image77.png[]

Enter the URL you wish to record from in the target URL field and click the Record button. You can use http://example.mocklab.io to try it out.

Now you need to make a request through WireMock to the target API so that it can be recorded. If you’re using the example URL, you can generate a request using curl:

    $ curl http://localhost:8080/recordables/123

Now click stop. You should see a message indicating that one stub was captured.

You should also see that a file has been created called something like _recordables_123-40a93c4a-d378-4e07-8321-6158d5dbcb29.json_ under the mappings directory created when WireMock started up, and that a new mapping has appeared at http://localhost:8080/__admin/mappings.

Requesting the same URL again (possibly disabling your wifi first if you want a firm proof) will now serve the recorded result:

----
$ curl http://localhost:8080/recordables/123

{
"message": "Congratulations on your first recording!"
}
----

== Record all traffic (Mappings and Responses) that comes through proxy - by Code

An example of how such a record can be achieved

----
@Test
public void startRecording() {

    SnapshotRecordResult recordedMappings;

    DriverManager.getDriverVirtualService()
            .start();
    DriverManager.getDriverVirtualService()
            .startRecording("http://example.mocklab.io");
    recordedMappings = DriverManager.getDriverVirtualService()
            .stopRecording();

    BFLogger.logDebug("Recorded messages: " + recordedMappings.toString());

}
----

== Create Mappings and Responses manually by text files

EMPTY

== Create Mappings and Responses manually by code

Link to full file structure: https://github.com/devonfw/devonfw-testing/blob/develop/mrchecker-framework-modules/mrchecker-webapi-module/src/test/java/com/capgemini/mrchecker/endpoint/rest/REST_FarenheitToCelsiusMethod_Test.java[REST_FarenheitToCelsiusMethod_Test.java]

=== Start up Virtual Server

----
public void startVirtualServer() {

    // Start Virtual Server
    WireMockServer driverVirtualService = DriverManager.getDriverVirtualService();

    // Get Virtual Server running http and https ports
    int httpPort = driverVirtualService.port();
    int httpsPort = driverVirtualService.httpsPort();

    // Print is Virtual server running
    BFLogger.logDebug("Is Virtual server running: " + driverVirtualService.isRunning());

    String baseURI = "http://localhost";
    endpointBaseUri = baseURI + ":" + httpPort;
}
----

=== Plug in a virtual asset

REST_FarenheitToCelsiusMethod_Test.java

----
public void activateVirtualAsset() {
    /*
    * ----------
    * Mock response. Map request with virtual asset from file
    * -----------
    */
    BFLogger.logInfo("#1 Create Stub content message");
    BFLogger.logInfo("#2 Add resource to virtual server");
    String restResourceUrl = "/some/thing";
    String restResponseBody = "{ \"FahrenheitToCelsiusResponse\":{\"FahrenheitToCelsiusResult\":37.7777777777778}}";

    new StubREST_Builder //For active virtual server ...
            .StubBuilder(restResourceUrl) //Activate mapping, for this Url AND
            .setResponse(restResponseBody) //Send this response  AND
            .setStatusCode(200) // With status code 200 FINALLY
            .build(); //Set and save mapping.

}
----

Link to full file structure: https://github.com/devonfw/devonfw-testing/blob/develop/mrchecker-framework-modules/mrchecker-webapi-module/src/main/java/com/capgemini/mrchecker/webapi/endpoint/stubs/StubREST_Builder.java[StubREST_Builder.java]

Source link to http://wiremock.org/docs/stubbing/[How to create Stub].

StubREST_Builder.java

----
public class StubREST_Builder {

    // required parameters
    private String endpointURI;

    // optional parameters
    private int statusCode;

    public String getEndpointURI() {
        return endpointURI;
    }

    public int getStatusCode() {
        return statusCode;
    }

    private StubREST_Builder(StubBuilder builder) {
        this.endpointURI = builder.endpointURI;
        this.statusCode = builder.statusCode;
    }

    // Builder Class
    public static class StubBuilder {

        // required parameters
        private String endpointURI;

        // optional parameters
        private int     statusCode  = 200;
        private String  response    = "{ \"message\": \"Hello\" }";

        public StubBuilder(String endpointURI) {
            this.endpointURI = endpointURI;
        }

        public StubBuilder setStatusCode(int statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        public StubBuilder setResponse(String response) {
            this.response = response;
            return this;
        }

        public StubREST_Builder build() {

            // GET
            DriverManager.getDriverVirtualService()
                    .givenThat(
                            // Given that request with ...
                            get(urlMatching(this.endpointURI))
                                    .withHeader("Content-Type", equalTo(ContentType.JSON.toString()))
                                    // Return given response ...
                                    .willReturn(aResponse()
                                            .withStatus(this.statusCode)
                                            .withHeader("Content-Type", ContentType.JSON.toString())
                                            .withBody(this.response)
                                            .withTransformers("body-transformer")));

            // POST
            DriverManager.getDriverVirtualService()
                    .givenThat(
                            // Given that request with ...
                            post(urlMatching(this.endpointURI))
                                    .withHeader("Content-Type", equalTo(ContentType.JSON.toString()))
                                    // Return given response ...
                                    .willReturn(aResponse()
                                            .withStatus(this.statusCode)
                                            .withHeader("Content-Type", ContentType.JSON.toString())
                                            .withBody(this.response)
                                            .withTransformers("body-transformer")));

            // PUT
            DriverManager.getDriverVirtualService()
                    .givenThat(
                            // Given that request with ...
                            put(urlMatching(this.endpointURI))
                                    .withHeader("Content-Type", equalTo(ContentType.JSON.toString()))
                                    // Return given response ...
                                    .willReturn(aResponse()
                                            .withStatus(this.statusCode)
                                            .withHeader("Content-Type", ContentType.JSON.toString())
                                            .withBody(this.response)
                                            .withTransformers("body-transformer")));

            // DELETE
            DriverManager.getDriverVirtualService()
                    .givenThat(
                            // Given that request with ...
                            delete(urlMatching(this.endpointURI))
                                    .withHeader("Content-Type", equalTo(ContentType.JSON.toString()))
                                    // Return given response ...
                                    .willReturn(aResponse()
                                            .withStatus(this.statusCode)
                                            .withHeader("Content-Type", ContentType.JSON.toString())
                                            .withBody(this.response)
                                            .withTransformers("body-transformer")));

            // CATCH any other requests
            DriverManager.getDriverVirtualService()
                    .givenThat(
                            any(anyUrl())
                                    .atPriority(10)
                                    .willReturn(aResponse()
                                            .withStatus(404)
                                            .withHeader("Content-Type", ContentType.JSON.toString())
                                            .withBody("{\"status\":\"Error\",\"message\":\"Endpoint not found\"}")
                                            .withTransformers("body-transformer")));

            return new StubREST_Builder(this);
        }
    }
}
----
