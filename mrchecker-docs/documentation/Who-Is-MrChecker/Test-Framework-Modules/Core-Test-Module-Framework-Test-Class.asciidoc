= Test Class

== Overview

The following image gives a general overview of a test class "lifecycle".

image::images/image52.png[]

More information on the methods and annotations used in this image can be found in the following chapter.

== Methods and annotations

The actual tests that will be executed are located in the so-called Test Classes. Starting a new project, a new package should be created.

*Source folder*: _mrchecker-app-under-test/src/test/java_

*Name*: `com.example.selenium.tests.tests.YOUR_PROJECT`

Test classes have to extend the `BaseTest` class.

----
public class DemoTest extends BaseTest {

	@Override
	public void setUp() {

	}

	@Override
	public void tearDown() {

	}
}
----

=== BasePage method: setUp

This method will be executed before the test. It allows objects to be instantiated, e.g. Page objects.

----
@Override
public void setUp() {
	someTestPage = new SomeTestPage();
}
----

=== BasePage method: tearDown

The tearDown methods executes after the test. It allows the clean up of the testing environment.

=== Annotations

The `@Test` annotation indicates that the following method is a test method.

Additionally, there are two annotations that can help preparing and disassembling the test class: `@BeforeClass` and `@AfterClass`.

`@BeforeClass` will execute the following method once at the beginning, before running any test method. Compared to the setUp() method provided by the BaseTest class, this annotation will only run once, instead of before every single test method. The advantage here: things like login can be set up in `@BeforeClass`, as they can often be very time consuming. Logging in on a webapplication once and afterwards running all the test methods is more efficient than logging in before every test method, especially if they are being executed on the same page.

`@AfterClass` will execute after the last test method. Just like `@BeforeClass` this method will only run once, in contrary to the `tearDown()` method.

Initialize a new test method by using the `@Test` annotation.

----
@Test
public void willResultBeShown() {

}
----

This method will interact with a page object in order to test it.

=== Sample Setup

----
@BeforeClass
public static void setUpBeforeClass() throws Exception {
	BFLogger.logInfo("[Step1] Login as Account Administrator");
}

@AfterClass
public static void tearDownAfterClass() throws Exception {
	BFLogger.logInfo("[Step4] Logout");
}

@Override
public void setUp() {
	BFLogger.logInfo("Open home page before each test");
}

@Override
public void tearDown() {
	BFLogger.logInfo("Clean all data updated while executing each test");
}

@Test
public void test1() {
	BFLogger.logInfo("[Step2] Filter by \"Creation Date\" - Descending");
	BFLogger.logInfo("[Step3] Set $1 for first 10 Users in column \"Invoice to pay\"");

}

@Test
public void test2() {
	BFLogger.logInfo("[Step2] Filter by \"Invoice to pay\" - Ascending");
	BFLogger.logInfo("[Step3] Set $100 for first 10 Users in column \"Invoice to pay\"");
}
----
