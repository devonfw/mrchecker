:toc: macro

= Test Class

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Overview

The following image gives a general overview of a test class "lifecycle".

image::images/image52.png[]

More information on the methods and annotations used in this image can be found in the following chapter.

== Methods and annotations

The actual tests that will be executed are located in the so-called Test Classes.
Starting a new project, a new package should be created.

*Source folder*: _mrchecker-app-under-test/src/test/java_

*Name*: `com.example.selenium.tests.tests.YOUR_PROJECT`

Test classes have to extend the `BaseTest` class.

[source,java]
----
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;

public class DemoTest extends BaseTest {

    @BeforeEach
    public void setUp() {
        // This method will be executed before each test.
    }

    @AfterEach
    public void tearDown() {
        // The tearDown method executes after each test.
        // It allows the cleanup of the testing environment.
    }
}
----

=== Annotations

In JUnit 5, you should use `@Test` to indicate that a method is a test method, `@BeforeAll` and `@AfterAll` for setup and teardown at the class level, and `@BeforeEach` and `@AfterEach` for setup and teardown at the method level.

`@Test` annotation still indicates that the following method is a test method.

`@BeforeAll` and `@AfterAll` are used for setup and teardown at the class level.
These methods should be static and should be declared in a class annotated with `@TestInstance(TestInstance.Lifecycle.PER_CLASS)` to ensure they run only once for the entire test class.

`@BeforeEach` and `@AfterEach` are used for setup and teardown at the method level.
They run before and after each test method.

Initialize a new test method by using the `@Test` annotation.

----
@Test
public void willResultBeShown() {

}
----

This method will interact with a page object in order to test it.

=== Sample Setup

[source,java]
----
public class DemoTest extends BaseTest {

    @BeforeAll
    public static void setUpBeforeClass() throws Exception {
	    BFLogger.logInfo("[Step1] Login as Account Administrator");
    }

    @AfterAll
    public static void tearDownAfterClass() throws Exception {
	    BFLogger.logInfo("[Step4] Logout");
    }

    @Override
    public void setUp() {
	    BFLogger.logInfo("Open home page before each test");
    }

    @Override
    public void tearDown() {
	    BFLogger.logInfo("Clean all data updated while executing each test");
    }

    @Test
    public void test1() {
	    BFLogger.logInfo("[Step2] Filter by \"Creation Date\" - Descending");
	    BFLogger.logInfo("[Step3] Set $1 for first 10 Users in column \"Invoice to pay\"");
    }

    @Test
    public void test2() {
	    BFLogger.logInfo("[Step2] Filter by \"Invoice to pay\" - Ascending");
	    BFLogger.logInfo("[Step3] Set $100 for first 10 Users in column \"Invoice to pay\"");
    }
}
----
