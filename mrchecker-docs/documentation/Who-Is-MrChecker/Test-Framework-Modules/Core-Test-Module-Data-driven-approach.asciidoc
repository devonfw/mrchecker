= Data driven approach

*Data driven approach* - External *data driven*

*External data driven* - Data as external file injected in *test case*

*Test case* - Categorize *functionality* and *severity*

You can find more information about data driven  here and here

There are a few ways to define parameters for tests.

= Internal Data driven approach

Data as *part* of *test case*

The different means to pass in parameters are shown below.

*Since mrchecker-core-module version 5.6.2.1*

Static methods are used to provide the parameters.

=== A method in the test class:

----
@ParameterizedTest
@MethodSource("argumentsStream")
----

*OR*

----
@ParameterizedTest
@MethodSource("arrayStream")
----

In the first case the arguments are directly mapped to the test method parameters. In the second case the array is passed as the argument. 

image::images/image30_new.png[]

=== A method in a different class:

----
@ParameterizedTest
@MethodSource("com.capgemini.mrchecker.core.datadriven.MyContainsTestProvider#provideContainsTrueParameters")
----

image::images/image32_new.png[]

*Prior to mrchecker-core-module version 5.6.2.1*

Parameters that are passed into tests using the `@Parameters` annotation must be _Object[]_s

=== In the annotation:

----
@Parameters({"1, 2, 3", "3, 4, 7", "5, 6, 11", "7, 8, 15"})
----

image::images/image30.png[]

The parameters must be primitive objects such as integers, strings, or booleans. Each set of parameters is contained within a single string and will be parsed to their correct values as defined by the test method’s signature.

=== In a method named in the annotation:

----
@Parameters(method = "addParameters")
----

image::images/image31.png[]

A separate method can be defined and referred to for parameters. This method must return an `Object[]` and can contain normal objects.

=== In a class:

----
@Parameters(source = MyContainsTestProvider.class)
----

image::images/image32.png[]

A separate class can be used to define parameters for the test. This test must contain at least one static method that returns an Object[], and its name must be prefixed with provide. The class could also contain multiple methods that provide parameters to the test, as long as they also meet the required criteria.

= External Data Driven

Data as *external file injected* in *test case*

*Since mrchecker-core-module version 5.6.2.1*

Tests use the annotation @CsvFileSource to inject CSVs file.

----
@CsvFileSource(resources = "/datadriven/test.csv", numLinesToSkip = 1)
----

A CSV can also be used to contain the parameters for the tests. It is pretty simple to set up, as it’s just a comma-separated list.

=== Classic CSV

image::images/image33_new.png[]

and CSV file structure

image::images/image34.png[]

=== CSV with headers

image::images/image35_new.png[]

and CSV file structure

image::images/image36.png[]

=== CSV with specific column mapper

image::images/image37_new.png[]

and Mapper implementation

image::images/image38_new.png[]

*Prior to mrchecker-core-module version 5.6.2.1*

Tests use the annotation @FileParameters to inject CSVs file.

----
@FileParameters("src/test/resources/datadriven/test.csv")
----

A CSV can also be used to contain the parameters for the tests. It is pretty simple to set up, as it’s just a comma-separated list.

=== Classic CSV

image::images/image33.png[]

and CSV file structure

image::images/image34.png[]

=== CSV with headers

image::images/image35.png[]

and CSV file structure

image::images/image36.png[]

=== CSV with specific column mapper

image::images/image37.png[]

and Mapper implementation

image::images/image38.png[]
