= Plug in service virtualization

== Classic application structure

image::images/image74.png[]

This is a quite common application structure, where we have any of the following in Application Under Test (AUT):

* UI / GUI
* WebAPI
* 3rd party service

== Classic application structure with virtualization

image::images/image75.png[]

This classic application is quite fragile for development and/or test process. Especially so, if the component (WebAPI) connected to the Application Under Test is:

* Not yet completed
* Still evolving
* Controlled by a third-party or partner
* Available for testing only in limited capacity or at inconvenient times
* Difficult to provision or configure in a test environment
* Needed for simultaneous access by different teams with varied test data setup and other requirements
* Restricted or costly to use for load and performance testing

You can find the full list of such "classic application structure" limitations here https://github.com/devonfw/devonfw-testing/wiki/What-is-service-virtualization[What-is-service-virtualization].

*Service virtualization is the key solution to address such a list of impediments. *

For simplicity, AUT connects to other components by TCP/IP protocol. Therefore AUT has an IP address and port number where given components operate. _To plug in virtualization server, the author of AUT ought to switch IP and port to "proxy server" instead of real endpoint component (WebAPI)_ . Finally, "proxy server" maps requests come from AUT with either virtual assets or real endpoint component (WebAPI). How do maps work in such a "proxy server"? Have a look here https://github.com/devonfw/devonfw-testing/wiki/How-to-make-virtual-asset[How-to-make-virtual-asset]

Therefore AUT is build either with:

* switchable property file acquired on startup

or

* "on the fly" operation to change IP and ports of connected components.

== Classic APP structure with full scope - Binding in service virtualization

image::images/image76.png[]
