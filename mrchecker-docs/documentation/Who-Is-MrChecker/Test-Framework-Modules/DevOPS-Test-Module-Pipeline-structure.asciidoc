= Pipeline structure

== Pipeline configuration:

The default interaction with Jenkins required manual jobs. This keeps configuration of a job in Jenkins separate from source code. With Pipeline plugin users can implement a pipeline procedure in Jenkinsfile and store it in repository with other code. This approach is used in Mr Checker framework. More info: https://jenkins.io/solutions/pipeline/

Our CI & CD processes are divided into a few separate files: Jenkins_node.groovy is the file to manage all processes. It defines all operations executed on a Jenkins node, so all code in this file is closed in node closure. Workflow in Jenkinsfile:

* Read all parameters from a Jenkins job
* Execute stage to prepare the environment
* Execute git pull command
* Set Jenkins job description
* Execute compilation of the project in a special prepared docker container
* Execute unit tests
* Execute integration tests
* Deploy artifacts to a local repository
* Deploy artifacts to an external repository (nexus/arifactory)

Not all the steps must be present in the Jenkins files. This should be configured for particular job requirements.

== Description of stages:

=== Stage “Prepare environment”

First thing to do in this stage is overwriting properties loaded from Jenkins job. It is defined in “overrideProperties” function. The next function, “setJenkinsJobVariables” defines environment variables such as :

* JOB_NAME_UPSTREAM
* BUILD_DISPLAY_NAME_UPSTREAM
* BUILD_URL_UPSTREAM
* GIT_CREDENTIALS
* JENKINS_CREDENTIALS

The last function in the stage – “setWorkspace”  -creates an environment variable with path to local workspace. This is required beacuse when using pipeline plugin, Jenkins does not create the WORKSPACE env variables.

=== Stage "Git pull"

It pulls sources from the repository and loads “git pull” file which contains additional methods:

* setGitAuthor – setting properties about git author to the file “build.properties” and loading created file
* tryMergeWithBranch – checking if actual branch can be merged with default main branch

=== Stage “Build compile”

Verify with maven that code builds without errors

=== Stage “Unit test”

Execute unit tests with mvn surefire test and publish reports in junit and allure format

=== Stage “Integration test”

Execute integration tests with mvn surefire test and publish reports in junit and allure format

=== Stage “Deploy – local repo”

Archive artifacts as a jar file in the local repository

=== Stage ”Deploy – nexu repo”

Deploy to the external repository with maven release deploy command with credentials stored in Jenkins machine. Additional files:

* mailSender.groovy – contains methods for sending mail with generated content
* stashNotification.groovy – send job status for bitbucket by a curl command
* utils.groovy - contains additional functions to load properties, files and generate additional data
