= Start a virtual server

The following picture presents the process of executing Smoke Tests in a virtualized environment:

image::images/image78.png[]

== Install docker service

If docker is not already installed on machine (this should be checked during C2C creation), install docker, docker-compose, apache2-utils, openssl (You can use *script* to install docker & docker-compose OR refer to this *post* and add Alias for this machine <C2C_Alias_Name>):

* run the script
* sudo apt-get install -y apache2-utils

== Build a docker image

*Dockerfile:*

----
FROM docker.xxx.com/ubuntu:16.04
MAINTAINER Maintainer Name "maintainer@email.address"
LABEL name=ubuntu_java \
           version=v1-8.0 \
           base="ubuntu:16.04" \
           build_date="03-22-2018" \
           java="1.8.0_162" \
           wiremock="2.14.0" \
           description="Docker to use with Ubuntu, JAVA and WIREMOCK "

# Update and install the applications needed
COPY 80proxy /etc/apt/apt.conf.d/80proxy
RUN apt-get update
RUN apt-get install -y \
            wget \
            libfontconfig \
            unzip \
            zip
            ksh \
            curl \
            git

COPY wgetrc /etc/wgetrc

#Env parameters

### JAVA PART ###
#TO UPDATE:please verify url link to JDK http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
##Download and install JAVA JDK8
RUN mkdir /opt/jdk
RUN wget -qq --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u162-b12/0da788060d494f509bf8624735fa2f1/jdk-8u162-linux-x64.tar.gz && tar -zxf jdk-8u162-linux-x64.tar.gz -C /opt/jdk && rm jdk-8u162-linux-x64.tar.gz && update-alternatives --install /usr/bin/javac javac /opt/jdk/jdk1.8.0_162/bin/javac 100 && java -version && chmod 755 -R /opt/jdk/jdk1.8.0_162/
RUN java -version

##Add user
RUN useradd -u 29001 -g 100 srvpwiredev

##Add app
RUN mkdir -p -m 777 /app
COPY wiremock-standalone-2.14.0.jar /app/wiremock-standalone-2.14.0.jar

##Expose port
EXPOSE 8080

##Set workdir
WORKDIR /App

##Run app
CDM java -jar /app/wiremock-standalone-2.14.0.jar
----

Execute the following steps with a specified version to build a docker image and push it to the repository :

----
## Build image
sudo docker build -t docker.xxx.com/app/build/wiremock:v2.14.0.

## Push image
sudo docker login docker.xxx.com
sudo docker push docker.xxx.com/app/build/wiremock:v2.14.0.
----

== Run docker image

To run a docker image, execute the following command:

    sudo docker run -td -p 8080:8080 -v /home/wiremock/repo/app/docker/QA/mappings:/app/mappings -v /home/wiremock/repo/app/docker/QA/__files:/app/__files --restart always docker.xxx.com/app/build/wiremock:v2.14.0.

Where:

*-p* - publish a container’s port to the host

*-v* - bind mount a volume. WireMock server creates two directories under the current one: mappings and __files. It is necessary to mount directories with already created mappings and responses to make it work.

*-restart always* - restart policy to apply when a container exists

All of the parameters are described in: https://docs.docker.com/engine/reference/run/[official docker documentation]

= Map requests with virtual assets

*What is WireMock?*

WireMock is an HTTP mock server. At its core it is a web server that can be primed to serve canned responses to particular requests (stubing) and that captures incoming requests so that they can be checked later (verification). It also has an assortment of other useful features including record/playback of interactions with other APIs, injection of faults and delays, simulation of stateful behaviour.

Full documentation can be found under the following link: http://wiremock.org/docs[WireMock]

== Record / create virtual assets mappings

*Record*

WireMock can create stub mappings from requests it has received. Combined with its proxying feature, this allows you to "record" stub mappings from interaction with existing APIs.

Record and playback (Legacy): http://wiremock.org/docs/record-playback-legacy/[documentation]

    java -jar wiremock-standalone-2.16.0.jar --proxy-all="http://search.twitter.com" --record-mappings --verbose

Once it’s started and request is sent to it, it will be redirected to "http://search.twitter.com" and traffic (response) is saved to files in mappings and __files directories for further use.

Record and playback (New): http://wiremock.org/docs/record-playback/[documentation]

== Enable mappings in a virtual server

When the WireMock server starts, it creates two directories under the current one: mappings and __files. To create a stub, it is necessary to drop a file with a .json extension under mappings.

*Run docker with mounted volumes*

Mappings are in a repository. It is necessary to mount directories with already created mappings and responses to make it work:

    sudo docker run -td -p 8080:8080 -v /home/wiremock/repo/app/docker/QA/mappings:/app/mappings -v /home/wiremock/repo/app/docker/QA/__files:/app/__files --restart always docker.xxx.com/app/build/wiremock:v2.14.0.

The description of how to build and run docker is available under: https://docs.docker.com/engine/reference/run/[Docker run command description]

*Recorded mappings*

Recorded mappings are kept in the project repository.

== Create a user and map them to docker user

To enable the connection from Jenkins to Virtual Server (C2C), it is necessary to create a user and map them to docker group user. It can be done using the following command:

    adduser -G docker -m wiremock

To set the password for a wiremock user:

    passwd wiremock

== Create SSH private and public keys for a wiremock user

SSH keys serve as a means of identifying yourself to an SSH server using https://en.wikipedia.org/wiki/Public-key_cryptography[public-key cryptography] and https://en.wikipedia.org/wiki/Challenge%E2%80%93response_authentication[challenge-response authentication]. One immediate advantage this method has over traditional password is that you can be authenticated by the server without ever having to send your password over the network.

To create an SSH key, log in as wiremock (previously created user).

    su wiremock

The .ssh directory is not by default created below user home directory. Therefore, it is necessary to create it:

    mkdir ~/.ssh

Now we can proceed with creating an RSA key using ssh-keygen (a tool for creating new authentication key pairs for SSH):

    ssh-keygen -t rsa

A key should be created under /.ssh/id_rsa 
Appending the public keys to authorized_keys:

    wiremock@vc2crptXXXXXXXn:~/ssh$ cat id_rsa.pub >> authorized_keys

== Install an SSH key in Jenkins

To add an SSH key to Jenkins, go to credentials in your job location. Choose the folder within credentials, then 'global credentials', 'Add credentials'. Fill in the fields. Finally, the entry should be created.

== Build a Jenkins Groovy script

The description of how to use SSH Agent plugin in Jenkins pipeline can be found under: https://www.karthikeyan.tech/2017/09/ssh-agent-blue-ocean-via-jenkins.html

Example of use:

----
sshagent (credentials: [env.WIREMOCK_CREDENTIALS]) {
     sh """
         ssh -T -o StrictHostKeyChecking=no -l ${env.WIREMOCK_USERNAME} ${env.WIREMOCK_IP_ADDRESS} "docker container restart ${env.WIREMOCK_CONTAINER_NAME}"
     """
}
----

Where: env.WIREMOCK_CREDENTIALS is a credential id of previously created wiremock credentials. Now that it is present, we can execute commands on a remote machine, where in ssh command: 
env.WIREMOCK_USERNAME - user name of user connected with configured private key 
env.WIREMOCK_IP_ADDRESS - ip address of the machine where this user with this private key exists

== Pull repository with virtual assets

To pull the repository on a remote machine, it is necessary to use the previously described SSH Agent plugin. An example of use:

----
sshagent (credentials: [env.WIREMOCK_CREDENTIALS]) {
withCredentials([usernamePassword(credentialsId: end.STASH_CREDENTIALS, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
     sh """
         ssh -T -o StrictHostKeyChecking=no -l ${env.WIREMOCK_USERNAME} ${env.WIREMOCK_IP_ADDRESS} "cd ~/${env.APPLICATION_DIRECTORY_WIREMOCK}/${env.PROJET_HOME}; git fetch https://&USER:$PASS@${env.GIT_WITHOUT_HTTPS} ${env.GIT_BRANCH}; git reset --hard FETCH_HEAD; git clean -df"
      """
    }
}
----

Where:

*withCredentials* allows various kinds of credentials (secrets) to be used in idiosyncratic ways. Each binding will define an environment variable active within the scope of the step. Then the necessary commands are executed:

`cd …​` - command will change from current directory to the specified directory with git repository

`git fetch …​ ;git reset …​ ;git clean …​` - pull from GIT branch. Git pull or checkout are not used here to prevent the situation with wrong coding between Mac OSX/Linux etc.

*PLEASE remember that when using this script for the first time, the code from previous block should be changed to:*

----
stage("ssh-agent"){
        sshagent (credentials: [env.WIREMOCK_CREDENTIALS]) {
            withCredentials([usernamePassword(credentialsId: end.STASH_CREDENTIALS, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                sh """
                        ssh -T -o StrictHostKeyChecking=no -l ${env.WIREMOCK_USERNAME} ${env.WIREMOCK_IP_ADDRESS} "cd ~/${env.APPLICATION_DIRECTORY_WIREMOCK} ;git clone --depth=1 --branch=develop https://&USER:$PASS@${env.GIT_WITHOUT_HTTPS}"';
                """
    }
}
----

= Install an application with Smoke environment

== Update properties settings file

New settings file is pushed to the repository. Example configuration:

----
...
   <key>autocomplete</key>
   <string>http://server:port</string>
   <key>benefitsummary</key>
   <string>http://server:port</string>
   <key>checkscan</key>
   <string>http://server:port</string>
   <key>dpesb</key>
   <string>http://server:port</string>
...
----

Address of service (backend) should be changed to wiremock address as it is shown on listing to change the default route.

== Build an application with updated properties file

New versions of application are prepared by Jenkins job.

== Install an application on target properties file

Installation of an application is actually executed in a non-automated way using SeeTest environment.

= UI tests

== Run Jenkins job

*Jenkinsfile:*

----
// Jenkins parameters are overriding the properties below
def properties = [

          JENKINS_LABELS                                 : 'PWI_LINUX_DEV',
          APPLICATION_FOLDER                             : 'app_dir',
          PROJECT_HOME                                   : 'app_home_folder',

          //WIREMOCK
          WIREMOCK_CREDENTIALS                           : 'vc2crptXXXXXXn',
          WIREMOCK_USERNAME                              : 'wiremock',
          WIREMOCK_ADDRESS                               : 'http://vc2crptXXXXXXn.xxx.com:8080',
          WIREMOCK_IP_ADDRESS                            : '10.196.67.XXX',
          WIREMOCK_CONTAINER_NAME                        : 'wiremock',
          APPLICATION_DIRECTORY_WIREMOCK                 : 'repo',

          //GIT
          GIT_CREDENTIALS                                : 'e47742cc-bb66-4321-2341-a2342er24f2',
          GIT_BRANCH                                     : 'develop',
          GIT_SSH                                        : 'ssh://git@stash.xxx.com/app/app.git'
          GIT_HTTPS                                      : 'HTTPS://git@stash.xxx.com/app/app.git',

          STASH_CREDENTIALS                              : 'e47742cc-bb66-4321-2341-a2342er24f2',


          //DOCKER
          ARTIFACTORY_USER_CREDENTIALS                   : 'e47742cc-bb66-4321-2341-a2342er24f2',
          SEETEST_DOCKER_IMAGE                           : 'docker.xxx.com/project/images/app:v1-8.3',

          //SEETEST_DOCKER_IMAGE
          SEETEST_APPLICATION_FOLDER                     : 'seetest_dir',
          SEETEST_PROJECT_HOME                           : 'Automated Scripts',
          SEETEST_GIT_SSH                                : 'ssh://git@stash.xxx.com/pr/seetest_automation_cucumber.git'
          SEETEST_GIT_BRANCH                             : 'develop',
          SEETEST_GRID_USER_CREDENTIALS                  : 'e47742cc-bb66-4321-2341-a2342er24f2',
          SEETEST_CUCUMBER_TAG                           : '@Virtualization',
          SEETEST_CLOUD_NAME                             : 'Core Group',
          SEETEST_IOS_VERSION                            : '11',
          SEETEST_IOS_APP_URL                            : '',
          SEETEST_INSTALL_APP                            : 'No',
          SEETEST_APP_ENVIRONMENT                        : 'SmokeTests',
          SEETEST_DEVICE_QUERY                           : '',
]

node(properties.JENKINS_LABELS) {
    try {
        prepareEnv(properties)
        gitCheckout()
        stageStartVirtualServer()
        stageMapApiRequests()
        stageInstallApplication()
        stageUITests()
     } catch(Exception ex) {
        currentBuild.result = 'FAILURE'
        error = 'Error' + ex
     }
}

//====================================END OF PIPELINE==========================================

private void prepareEnv(properties) {
    cleanWorkspace()
    overrideProperties(properties)
    setWorkspace()
}

private void gitCheckout() {
    dir(env.APPLICATION_FOLDER) {
        checkout([$class: 'GitSCM', branches: [[name: env.GIT_BRANCH]], doGenerateSubmoduleConfiguration: false, extensions: [[$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 50]], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: env.GIT_CREDENTIALS, url: env.GIT_SSH]])
     }
}

private void stageStartVirtualServer() {
    def module = load "${env.SUBMODULES_DIR}/stageStartVirtualServer.groovy"
    module()
}

private void stageMapApiRequests() {
    def module = load "${env.SUBMODULES_DIR}/stageMapApiRequests.groovy"
    module()
}

private void stageInstallApplication() {
    def module = load "${env.SUBMODULES_DIR}/stageInstallApplication.groovy"
    module()
}

private void stageUITests() {
    def module = load "${env.SUBMODULES_DIR}/stageUITests.groovy"
    module()
}

private void setWorkspace() {
    String workspace = pwd()
    env.APPLICATION_DIRECTORY = "/${env.APPLICATION_DIRECTORY}"
    env.WORKSPACE_LOCAL - workspace + env.APPLICATION_DIRECTORY
    env.SEETEST_PROJECT_HOME_ABSOLute_PATH = "${workspace}/${env.SEETEST_APPLICATION_FOLDER}/${env.SEETEST_PROJECT_HOME}"
    env.SUBMODULES_DIR = env.WORKSPACE_LOCAL + "/pipelines/SmokeTests.submodules"
    env.COMMONS_DIR    = env.WORKSPACE_LOCAL + "/pipelines/commons"
}

/*
    function ovverrides env vales based on provided properties
*/
private void overrideProperties(properties) {
    for (param in properties) {
        if (env.(param.key) == null) {
           echo "Adding parameter '${param.key}' with default value: '$param.value}'"
           env.(param.key) = param.value
        } else {
           echo "Parameter '${param.key}' has overriden value: '${env.(param.key)}'"
        }
     }

     echo sh(script: "env | sort", returnStdout: true)
}

private void cleanWorkspace() {
   sh 'rm-rf *'
}
----

stageStartVirtualServer.groovy:

----
def call () {
    stage("Check virtual server") {
        def statusCode

        try {
            def response = httpRequest "${env.WIREMOCK_ADDRESS}/__admin/"
            statusCode = response.status
        } catch(Exception ex) {
            currentBuild.result = 'FAILURE'
            error 'WireMock server os unreachable.'
        }

        if(statusCode !=200) {
            currentBuild.result = 'FAILURE'
            error 'WireMock server is unreachable. Return code: ${statusCode}'
        }
    }
}
----

stageMapApiRequests.groovy:

----
def call() {
    stage("Map API requests with virtual assets") {
        checkoutRepository()
        restartWiremock()
        checkWiremockStatus()
     }
}

private checkoutRepository() {
    extractHTTPSUrl()
    sshagent (credentials: [env.WIREMOCK_CREDENTIALS]) {
        withCredentials([usernamePassword(credentialsId: env.STASH_CREDENTIALS, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
            sh """
                ssh -T -o StrictHostKeyChecking=no -l ${env.WIREMOCK_USERNAME} ${env.WIREMOCK_IP_ADDRESS} "cd~/${env.APPLICATION_DIRECTORY_WIREMOCK}/${env.PROJECT_HOME}; git fetch https://$USER:$PASS@${env.GIT_WITHOUT_HTTPS} ${env.GIT_BRANCH}; git reset --hard FETCH_HEAD; git clean -df"
             """
         }
     }
}

private restartWiremock() {
    sshagent (credentials: [env.WIREMOCK_CREDENTIALS]) {
            sh """
                ssh -T -o StrictHostKeyChecking=no -l ${env.WIREMOCK_USERNAME} ${env.WIREMOCK_IP_ADDRESS} "docker container restart ${env.WIREMOCK_CONTAINER_NAME}"
             """
     }
}

private checkWiremockStatus() {
    int wiremockStatusCheckCounter =6
    int sleepTimeInSeconds = 10
    def wiremockStatus

    for (i = 0; i < wiremockStatusCheckCounter; i++) {
         try {
             wiremockStatus = getHttpRequestStatus()
             echo "WireMock server status code: ${wiremockStatus}"
         } catch(Exceprion ex) {
             echo "Exception when checking connection to WireMock"
         }
         if(wiremockStatus == 200) break
         else sh "sleep $(sleepTimeInSeconds}"
      }

      if(wiremockStatus != 200) {
          currentBuild.result = 'FAILURE'
          error 'WireMock server is unreachable. Return code: ${wiremockStatus}'
      }
}

private def getHttpRequestStatus() {
    def response = httpRequest "${env.WIREMOCK_ADDRESS}/__admin"
    return response.status

private extractHTTPSUrl() {
    env.GIT_WITHOUT_HTTPS = env.GIT_HTTPS.replace("https://", "")
}

return this
----

stageInstallApplication.groovy:

----
def call() {
    stage('Install application with smoke tests environment') {
        dir(env.SEETEST_APPLICATION_FOLDER) {
            checkout([$class: 'GitSCM', branches: [[name: env.SEETEST_GIT_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: env.GIT_CREDENTIALS, url: env.SEETEST_GIT_SSH]])
        }
     }
}

return this
----

stageUITests.groovy:

----
def call() {
    stage('UI tests') {
        def utils = load "${env.SUBMODULES_DIR}/utils.groovy"

        try {
            utils.generateUserIDVariable(); //Generate USER_ID and USER_GROUP
            docker.image(env.SEETEST_DOCKER_IMAGE).inside("-u ${env.USER_ID}:${env.USER_GROUP}") {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.ARTIFACTORY_USER_CREDENTIALS}", passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME]]) {
                    executeTests()
                    compressArtifacts()
                    publishJUnitTestResultReport()
                    archiveArtifacts()
                    publishHTMLReports()
                    publishCucumberReports()
                 }
             }
        } catch (Exception exc) {
            throw exc
        }
   }
}

private executeTests() {
    withCredentials([usernamePassword(credentialsId: env.SEETEST_GRID_USER_CREDENTIALS, passwordVariable: 'GRID_USER_PASSWORD', usernameVariable: 'GRID_USER_NAME')]) {
            sh """
                cd ${env.SEETEST_PROJECT_HOME_ABSOLUTE_PATH}
                mvn clean test -B -Ddriver="grid" -Dtags="${env.SEETEST_CUCUMBER_TAG}" -DcloudName="${env.SEETEST_CLOUD_NAME}" -DdeviceQuery="${env.SEETEST_DEVICE_QUERY} -DgridUser="${GRID_USER_NAME}" -DgridPassword="${GRID_USER_PASSWORD}" -Dinstall="${env.SEETEST_INSTALL_APP}" -DiosUrl="${env.SEETEST_IOS_APP_URL}" -DdeviceType="iPhone" -DiosVersion="$env.SEETEST_IOS_VERSION}" -DparallelMode="allonall" -Denv="${env.SEETEST_APP_ENVIRONMENT}" site
             """
     }
}

private compressartifacts() {
    echo "Compressing artifacts from /target/site"
    sh """
        zip -r allure_report.zip **/${env.SEETEST_PROJECT_homE}/target/site
    """

private publishJUnitTestResultReport() {
    echo "Publishing JUnit reports from ${env.SEETEST_APPLICATION_FOLDER}/${env.SEETEST_PROJECT_HOME}/target/surefire-reports/junitreporters/*.xml"

    try {
        junit "${env.SEETEST_APPLICATION_FOLDER}/${env.SEETEST_PROJECT_HOME}/target/surefire-reports/junitreporters/*.xml"
    } catch(e) {
        echo("No JUnit report found")
    }
}

private archiveArtifacts() {
    echo "Archiving artifacts"

    try {
        archiveArtifacts allowEmptyArchive: true, artifacts: "**/allure_report.zip"
    } catch(e) {
        echo("No artifacts found")
    }
}

private publishHTMLReports() {
    echo "Publishing HTML reports from ${env.SEETEST_APPLICATION_FOLDER}/${env.SEETEST_PROJECT_HOME}/target/site/allure-maven-plugin"

    try {
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: "${env.SEETEST_APPLICATION_FOLDER/${env.SEETEST_PROJECT_HOME}/target/site/allure-maven-plugin", reportFiles: 'index.html', reportName: 'Allure report', reportTitles: 'Allure report'])
    } catch(e) {
        echo("No artifacts found")
    }
}

private publishCucumberREPORTS() {
    echo "Publishing Cucumber reports from ${env.SEETEST_APPLICATION_FOLDER}/${env.SEETEST_PROJECT_HOME}/target/cucumber-parallel/*.json"

    try {
        step([$class: 'CucumberReportPublisher', fileExcludePattern '', fileIncludePattern: "#{env.SEETEST_APPLICATION_FOLDER}/${env.SEETEST_PROJECT_HOME}/target/cucumber-parallel/*.json", ignoreFailedTests: false, jenkinsBasePath: '', jsonReportDirectory: '', missingFails: false, parallelTesting: false, pendingFails: false, skippedFails: false, undefinedFails: false])
    } catch(e) {
        echo("No Cucumber report found")
    }
}

return this
----

*Configuration*

It is possible to configure Jenkins job in two ways. First one is to edit the Jenkinsfile. All of the properties are in properties collection as below:

----
def properties = [

          JENKINS_LABELS                                : 'PWI_LINUX_DEV'

          ...

          //Docker
          ARTIFACTORY_USER_CREDENTIALS                  : 'ba2e4f46-56f1-4467-ae97-17b356d6s643',
          SEETEST_DOCKER_IMAGE                          : 'docker.XXX.com/app/base-images/seetest:v1-8.3',

          //SeeTest
          SEETEST_APPLICATION_FOLDER                    : 'seetest_dit',
          SEETEST_PROJECT_HOME                          : 'Automated_Scripts',
          SEETEST_GIT_SSH                               : 'ssh://stash.xxx.com/app/seetest_automation_cucumber.git',
          SEETEST_GIT_BRANCH                            : 'develop',

          ...
]
----

Second way is to add properties in 'Configure job'. All of the properties there are overriding properties from Jenkinsfile (the have the highest priority). They can then be set durring 'Build with Paremeters' process.

*Reports*

After a job execution 'Allure report' and 'Cucumber-JVM' reports should be visible. If any tests fail, You can check on which screen (printscreen from failures is attached, why and etc.)
