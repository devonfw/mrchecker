= Sample Walkthrough

This page will walk you through the process of creating a test case. We’ll create a very simple test for the Google search engine.

== Test Procedure

We would like to open the Google search engine, enter some search query and afterwards submit the form. We hope to see some results being listed, otherwise the test will fail. Summarized, the testing process would look like this.

1. Open google.com
2. Enter the string "Test" into the searchbox
3. Submit the form
4. Get the results and check if the result list is empty

== Creating new packages

We will need two new packages, one for the new page classes, the other for our test classes.

=== Creating package for test classes

Open Eclipse, use the "Project Explorer" on the left to navigate to

mrchecker-app-under-test → src/test/java -> com.example -> selenium.tests -> tests

Right click on "tests", click on "New" -> New Package. We’ll name the new package "com.example.selenium.tests.googleSearch".

image::images/image65.png[]

=== Creating package for page classes

Navigate to

mrchecker-app-under-test -> src/main/java -> com.example -> selenium -> pages

Right click on "pages", click on "New" -> New Package. The new package will be called "com.example.selenium.pages.googleSearch".

image::images/image66.png[]

== Creating the test class

The test class will contain the entire testing-routine. At first, we’ll create a new class inside our newly created "googleSearch" package (under src/test/java) and call it "GoogleSearchTest".

image::images/image67.png[]

As "GoogleSearchTest" is a test class, it has to extend the _BaseTest_ class. You may have to import some required packages and afterwards include a few required methods.

----
public class GoogleSearchTest extends BaseTest {

	@Override
	public void setUp() {

	}

	@Override
	public void tearDown() {

	}
}
----

Now, we’ll need a new Page object, which will represent the Google Search page. The page class will be named "GoogleSearchPage".

----
private GoogleSearchPage googleSearchPage;

@Override
public void setUp() {
	googleSearchPage = new GoogleSearchPage();
}
----

== Creating the GoogleSearchPage class

We have created a new field for the GoogleSearchPage class and instantiated an object in the setUp() method. As this class doesn’t exist yet, we’ll have to create it inside the googleSearch page class package.

image::images/image68.png[]

We extend the BasePage class with GoogleSearchPage, import all necessary packages and include all the required methods.

----
public class GoogleSearchPage extends BasePage {

	@Override
	public boolean isLoaded() {
		return false;
	}

	@Override
	public void load() {

	}

	@Override
	public String pageTitle() {
		return "";
	}
}
----

As this page class represents the Google homepage, we have to set up selectors for web elements required in our test case. In our example we have to create a selector for the search bar which we’ll interact with. The selector will be implemented as a field.

----
private static final By selectorGoogleSearchInput = By.css(#lst-ib);
----

The input field’s id _#lst-ib_ was found by using the developer console in Google Chrome.

This selector can be used to create a WebElement object of said search bar. Therefore, we’ll create a new method and call it "enterGoogleSearchInput".

----
public GoogleResultPage enterGoogleSearchInput(String searchText) {
	WebElement googleSearchInput = getDriver().findDynamicElement(selectorGoogleSearchInput);
	googleSearchInput.sendKeys(searchText);
	googleSearchInput.submit();

	return new GoogleResultPage();
}
----

As you can see, we return another page object that wasn’t yet created. This step is required, as the results that we would like to check are on another Google Page. This means we’ll have to create another page class, which will be shown later.

Finally, the empty methods inherited from the BasePage class have to be filled:

----
@Override
public boolean isLoaded() {
	if(getDriver().getTitle().equals(pageTitle())) {
		return true;
	}
	return false;
}

@Override
public void load() {
	getDriver().get("http://google.com");
}

@Override
public String pageTitle() {
	return "Google";
}
----

The method `isLoaded()` checks if the page was loaded by comparing the actual title with the expected title provided by the method `pageTitle()`. The `load()` method simply loads a given URL, in this case _http://google.com_.

The completion of these methods finalizes our _GoogleSearchPage_ class. We still have to create the _GoogleResultPage_ class mentioned before. This page will deal with the elements on the Google search result page.

== Creating the GoogleResultPage class

By right-clicking on the "pages" package, we’ll navigate to "new" -> "Class" to create a new class.

image::images/image69.png[]

The _GoogleResultPage_ class also has to extend _BasePage_ and include all required methods. Next, a new selector for the result list will be created. By using the result list, we can finally check if the result count is bigger than zero and thus, if the search request was successful.

----
private static final By selectorResultList = By.cssSelector("#res");
----

We’ll use this selector inside a new getter-method, which will return all ListElements.

----
public ListElements getResultList() {
	return getDriver().elementList(selectorResultList);
}
----

This method will allow the testcase to simply get the result list and afterwards check if the list is empty or not.

Finally, we have to complete all inherited methods.

----
@Override
public boolean isLoaded() {
	getDriver().waitForPageLoaded();
	if(getDriver().getCurrentUrl().contains("search")) {
		return true;
	}
	return false;
}

@Override
public void load() {
	BFLogger.logError("Google result page was not loaded.");
}

@Override
public String getTitle() {
	return "";
}
----

The method `isLoaded()` differs from the same method in _GoogleSearchPage_, because this site is being loaded as a result from a previous action. That’s why we’ll have to use the method `getDriver().waitForPageLoaded()` to be certain that the page was loaded completely. Afterwards we check if the current URL contains the term "search", as it only occurs on the result page. This way we can check if we’re on the right page.

Another result of this page being loaded by another object is that we don’t have to load any specific URL. We just add a BFLogger instance to print an error message if the page was not successfully loaded.

As we don’t use the `getTitle()` method we simply return an empty String.

Finally, all required page classes are complete and we can finalize the test class.

== Finalizing the test class

At this point, our GoogleSearchTest class looks like this:

----
public class GoogleSearchTest {

	private GoogleSearchPage googleSearchPage;


	@Override
	public void setUp() {
		googleSearchPage = new GoogleSearchPage();
	}

	@Override
	public void tearDown() {

	}
}
----

Next, we’ll create the test method, let’s call it `shouldResultReturn()`.

----
@Test
public void shouldResultReturn() {
	GoogleResultPage googleResultPage = googleSearchPage.enterGoogleSearchInput("Test");
	ListElements results = googleResultPage.getResultList();
	assertTrue("Number of results equals 0", results.getSize() > 0);
}
----

Code explanation: At first, we will run the `enterGoogleSearchInput()` method on the _GoogleSearchPage_ with the parameter "Test" to search for this exact string on Google. As this method returns a _GoogleResultPage_ object, we will store this in the local variable `googleResultPage`. Afterwards, we get the result list by utilizing the getter method that we created before. Finally, we create an assertion: We expect the list size to be bigger than zero, meaning that the google search query was successful as we received results. If this assertion is wrong, a message will be printed out, stating that the number of results equals zero.

We can run the test by right clicking on the test method -> Run as -> JUnit test.

image::images/image70.png[]

After starting the test, you’ll notice a browser window opening, resizing to given dimensions, opening Google, entering the query "Test" and submitting the form. After completing the test, you’ll see the test results on the right side of Eclipse. Green color indicator means that the test was successful, red means the test failed.

image::images/image71.png[]

This walkthrough should’ve provided you with basic understanding on how the framework can be used to create test cases.
