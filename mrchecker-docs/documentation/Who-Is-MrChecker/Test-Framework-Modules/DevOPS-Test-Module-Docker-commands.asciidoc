= What is Docker

Docker is an open source software platform to create, deploy and manage virtualized application containers on a common operating system (OS), with an ecosystem of allied tools.

= Where do we use Docker

DevOps module consists of Docker images

1. Jenkins image
2. Jenkins job image
3. Jenkins management image
4. Security image

in addition, each new node is also based on Docker

= Exploring basic Docker options

Let’s show some of the most important commands that are needed when working with our DevOps module based on the Docker platform. Each command given below should be preceded by a sudo call by default. If you don’t want to use `sudo` command create a Unix group called docker and add a user to it.

----
$ sudo groupadd docker
$ sudo usermod -aG docker $USER
----

== Build an image from a Dockerfile

----
# docker build [OPTIONS] PATH | URL | -
# 
# Options:
#  --tag , -t : Name and optionally a tag in the ‘name:tag’ format

$ docker build -t vc_jenkins_jobs .
----

== Container start

----
# docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
#
# Options:
# -d : To start a container in detached mode (background)
# -it : interactive terminal
# --name : assign a container name
# --rm : clean up
# --volumes-from="": Mount all volumes from the given container(s)
# -p : explicitly map a single port or range of ports
# --volume : storage associated with the image

$ docker run -d --name vc_jenkins_jobs vc_jenkins_jobs
----

== Remove one or more containers

----
# docker rm [OPTIONS] CONTAINER
#
# Options:
# --force , -f : Force the removal of a running container

$ docker rm -f jenkins
----

== List containers

----
# docker ps [OPTIONS]
# --all, -a : Show all containers (default shows just running)

$ docker ps
----

== Pull an image or a repository from a registry

----
# docker pull [OPTIONS] NAME[:TAG|@DIGEST]

$ docker pull jenkins/jenkins:2.73.1
----

== Push the image or a repository to a registry

Pushing new image takes place in two steps. First save the image by adding container ID to the commit command and next use push:

----
# docker push [OPTIONS] NAME[:TAG]

$ docker ps
  # copy container ID from the result
$ docker commit b46778v943fh vc_jenkins_mng:project_x
$ docker push vc_jenkins_mng:project_x
----

== Return information on Docker object

----
# docker inspect [OPTIONS] NAME|ID [NAME|ID...]
#
# Options:
# --format , -f : output format

$ docker inspect -f '{{ .Mounts }}' vc_jenkins_mng
----

== List images

----
# docker images [OPTIONS] [REPOSITORY[:TAG]]
#
# Options:
--all , -a : show all images with intermediate images

$ docker images
$ docker images jenkins
----

== Remove one or more images

----
# docker rmi [OPTIONS] IMAGE [IMAGE...]
#
# Options:
#   --force , -f : Force removal of the image

$ docker rmi jenkins/jenkins:latest
----

== Run a command in a running container

----
# docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
# -d : run command in the background
# -it : interactive terminal
# -w : working directory inside the container
# -e : Set environment variables

$ docker exec vc_jenkins_jobs sh -c "chmod 755 config.xml"
----

= Advanced commands

== Remove dangling images

----
$ docker rmi $(docker images -f dangling=true -q) 
----

== Remove all images

----
$ docker rmi $(docker images -a -q) 
----

== Removing images according to a pattern

----
$ docker images | grep "pattern" | awk '{print $2}' | xargs docker rm 
----

== Remove all exited containers

----
$ docker rm $(docker ps -a -f status=exited -q) 
----

== Remove all stopped containers

----
$ docker rm $(docker ps --no-trunc -aq) 
----

== Remove containers according to a pattern

----
$ docker ps -a | grep "pattern" | awk '{print $1}' | xargs docker rmi 
----

== Remove dangling volumes

----
$ docker volume rm $(docker volume ls -f dangling=true -q) 
----
