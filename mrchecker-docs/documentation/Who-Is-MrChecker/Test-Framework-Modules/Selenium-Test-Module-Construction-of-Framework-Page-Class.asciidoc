= Page Class

Page Object Models allow for the representation of a webpage as a Java Class. The class contains all required web elements like buttons, textfields, labels, etc. When initializing a new project, create a new package to store the Page Object Models in.

== Initialization

*Source folder*: _allure-app-under-test/src/main/java_

*Name*: `com.example.selenium.pages.YOUR_PROJECT`

Classes being created inside of this new package have to extend the *BasePage* class. As a result, a few abstract methods from *BasePage* have to be implemented.

----
public class DemoPage extends BasePage {

	@Override
	public boolean isLoaded() {

	}

	@Override
	public void load() {

	}

	@Override
	public String pageTitle() {

	}
}
----

The example above demonstrates a minimum valid Page Object class with all required methods included.

=== BasePage method: isLoaded

The inherited method `isLoaded()` can be used to check if the current Page Object Model has been loaded correctly. There are multiple ways to verify a correctly loaded page. One example would be to compare the actual page title with the expected page title.

----
public boolean isLoaded() {
	if(getDriver().getTitle().equals("EXPECTED_TITLE")) {
		return true;
	}
	return false;
}
----

=== BasePage method: load

The method `load()` can be used to tell the webdriver to load a specific page.

----
public void load() {
	getDriver().get("http://SOME_PAGE");
}
----

=== BasePage method: pageTitle

The `pageTitle()` method returns a String containing the page title.

== Creating a selector variable

To initialize web elements, a large variety of selectors can be used.

We recommend creating  a private and constant field for every web element youâ€™d like to represent in Java. Use the guide above to find the preferred selector and place it in the code below at "WEB_ELEMENT_SELECTOR".

----
private static final By someWebElementSelector = By.CSS("WEB_ELEMENT_SELECTOR");
----

As soon as you create the selector above, you can make use of it to initialize a WebElement object.

----
WebElement someWebElement = getDriver().findDynamicElement(someWebElementSelector);
----

*Note*: The examples displayed in the _cssSelector.docx_ file use the Selenium method `driver.findElement()` to find elements. However, using this framework we recommend  `findDynamicElement()` or `findQuietlyElement().findDynamicElement()` allows waiting for dynamic elements, for example buttons that pop up.

== Creating a page method

To interact with the page object, we recommend creating methods for each action.

----
public void enterGoogleSearchInput(String query) {
	...
}
----

Creating a method like the one above allows the test case to run something like `googleSearchPage.enterGoogleSearchInput("Hello")` to interact with the page object.

== Naming Conventions

For code uniformity and readability, we provide a few method naming conventions.

[cols=3*,options=header]
|===

|Element
|Action
|Name (example)

|Form: Input text
|enter
|`enterUsernameInput()`

|
|is (label)
|`isUsernameInputPresent()`

|
|is (value)
|`isUsernameEmpty()`

|
|get
|`getUsernameValue()`

|Form: Label
|get
|`getCashValue()`

|
|is (value)
|`isCashValueEmpty()`

|
|is (label)
|`isCashLabelPresent()`

|Form: Submit Button
|submit
|`submitLoginForm()`

|
|is
|`isLoginFormPresent()`

|Page: Button
|click
|`clickInfoButton()`

|
|is
|`isInfoButtonpresent()`

|Checkbox
|set
|`setRememberMeCheckbox()`

|
|unset
|`unsetRememberMeCheckbox()`

|
|is (present)
|`isRememberMeCheckboxPresent()`

|
|is (value)
|`isRememberMeCheckboxSet()`

|Radio
|set
|`setMaleRadioValue("Woman")`

|
|is (present)
|`isMaleRadioPresent()`

|
|is (visible)
|`isMaleRadioVisible()`

|
|get
|`getSelectedMaleValue()`

|Elements (Tabs, Cards, Account, etc.)
|click
|`clickPositionTab()` / `clickMyBilanceCard()`

|
|is
|`isMyBilanceCardPresent()`

|Dropdown List
|select
|`selectAccountTypeValue(typeName)`

|
|unselect
|`unselectAccountTypeValue(typeName)`

|
|multiple select
|`selectAccountTypesValues(List typeNames)`

|
|is (list)
|`isAccountTypeDropdownListPresent()`

|
|is (element present)
|`isAccountTypeElementPresent(typeName)`

|
|is (element selected)
|`isAccountTypeSelected(typeName)`

|Link
|click
|`clickMoreLink()`

|
|is
|`isMoreLinkPresent()`

|Combobox
|select
|`selectSortCombobox()`

|
|is (present)
|`isSortComboboxPresent(name)`

|
|is (contain)
|`selectSortComboboxContain(name)`

|Element Attribute
|get
|`getPositionTabCss()`

|
|get
|`getMoreLinkHref()` / `getRememberMeCheckboxName()`

|===
