:toc: macro

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

= MrChecker E2E tutorials

In order to learn more about MrChecker structure, start from Project Organisation section and then check out our fantastic tutorials:

== How to create a basic test in MrChecker

=== Example: Booking a table
As an example to test we will use https://mts-devonfw-core.cloud.okteto.net/bookTable[MyThaiStar] booking page. +
In order to book a table, do the following steps:

1. Open MyThaiStar Book Table Page
2. Enter booking data: Date and time, Name, Email and number of Table guests
3. Click Accept terms
4. Click Book table
5. Display confirmation box and send booking
6. Check if the booking was successful.

image::images/image1.png[]

image::images/image2.png[]

You can go through these steps manually and doublecheck the result.

=== How to prepare a test

==== 1. Create BookTablePage class

You will need a class which will represent MyThaiStart booking page. +
Fill the required methods with the following code:

----
public class BookTablePage extends BasePage {

    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded(); //waits untli the page is loaded 
        return getDriver().getCurrentUrl()
                .equals("https://mts-devonfw-core.cloud.okteto.net/bookTable"); //checks if current page address equals MyThaiStar booking page adress 
    }
    
    @Override
    public void load() {
        getDriver().get("https://mts-devonfw-core.cloud.okteto.net/bookTable"); //loads page under specified adress 
        getDriver().waitForPageLoaded(); //waits until the page is loaded
    }
    
    @Override
    public String pageTitle() {
        return "My Thai Star"; //returns page title
    }
}
----

`getDriver()` method allows accessing Selenium Web Driver which performs actions on the webpage.

As this page class represents the MyThaiStar booking page, you have to set up selectors for web elements required in the test case. In the example you have to create selectors for elements weâ€™ll interact with:

* Date and time input field
* Name input field
* Email input field
* Table guests input field
* Accept terms checkbox
* Book table button

Selectors will be implemented as fields.

Example of the selector for Date and time input field:

----
/** Date field search criteria */
private static final By dateSearch = By.cssSelector("input[formcontrolname='bookingDate']");
----

The input field's name "bookingDate" was found by using the developer console in Google Chrome. https://github.com/devonfw/devonfw-testing/wiki/documentation/cssSelector.docx[How to prepare an everlasting selector?]

image::images/image3.png[]

This selector can be used to create a WebElement object of the said input field. Therefore, you will create a new method and call it "enterTimeAndDate".

----
public void enterTimeAndDate(String date) {
    WebElement dateInput = getDriver().findElementDynamic(dateSearch); //creates a new WebElement to access Date and time input field 
    dateInput.sendKeys(date); //enters date value 
}
----

Now you can create other selectors and objects and methods for every element on the webpage: 

----
/** Name input field search criteria */
private static final By nameSearch = By.cssSelector("input[formcontrolname='name']");

/** Email input field search criteria */
private static final By emailSearch = By.cssSelector("input[formcontrolname='email']");

/** Number of guests search criteria */
private static final By guestsSearch = By.cssSelector("input[formcontrolname='assistants']");

/** Check box search criteria */
private static final By checkboxSearch = By.cssSelector("mat-checkbox[data-name='bookTableTerms']"); 

/** Book table button search criteria */
private static By bookTableSearch = By.name("bookTableSubmit"); 
----

----
public void enterName(String name) {
    WebElement nameInput = getDriver().findElementDynamic(nameSearch); //creates a new WebElement to access name input field
    nameInput.sendKeys(name); //enters name value 
}

public void enterEmail(String email) {
    WebElement emailInput = getDriver().findElementDynamic(emailSearch); //creates a new WebElement to access email input field
    emailInput.sendKeys(email); //enters email value 
}

public void enterGuests(int amountOfGuests) {
    WebElement guestsInput = getDriver().findElementDynamic(guestsSearch); //creates a new WebElement to access amount of guests input field
    guestsInput.sendKeys(Integer.toString(amountOfGuests)); //enters the number of guests value converted from integer to string  
}

public void acceptTerms() {
    WebElement checkbox = getDriver().findElementDynamic(checkboxSearch); //creates aa new WebElement to access accept terms checkbox 
    WebElement square = checkbox.findElement(By.className("mat-checkbox-inner-container")); //creates a new WebElement to access inner square 
    JavascriptExecutor js = (JavascriptExecutor) getDriver(); //creates a Javascript executor object 
    js.executeScript("arguments[0].click()", square); //executes a script which clicks the square 
    
}

public void clickBookTable() {
    WebElement buttonbutton = getDriver().findElementDynamic(bookTableSearch); //creates a new WebElement to access book table button 
    getDriver().waitUntilElementIsClickable(bookTableSearch); //waits until a button might be clicked 
    buttonbutton.click(); //clicks the button 
}
----

You can use those methods in order to create a new method to go through the whole booking process:

----
public ConfirmBookPage enterBookingData(String date, String name, String email, int guests) {
    enterTimeAndDate(date);
    enterName(name);
    enterEmail(email);
    enterGuests(guests);
    acceptTerms();
    
    clickBookTable();
    
    return new ConfirmBookPage();
}
----

==== 2. Create ConfirmBookPage class

As you can see, this method returns another page object that has not yet been created. This step is required, as the booking information that you would like to check is on another webpage. This means that you will have to create another page class and call it ConfirmBookPage:

----
public class ConfirmBookPage extends BasePage {
    
    /** Confirmation dialog search criteria */
    private static final By confirmationDialogSearch = By.className("mat-dialog-container"); 

    /** Send confirmation button search criteria */
    private static final By sendButtonSearch = By.name("bookTableConfirm");
    
    /** Cancel confirmation button search criteria */
    private static final By cancelButtonSearch = By.name("bookTableCancel");

    @Override
    public boolean isLoaded() {
        //creates a new WebElement to access confirmation dialog box
        WebElement confirmationDialog = getDriver().findElementDynamic(confirmationDialogSearch);  
        
        return confirmationDialog.isDisplayed(); //checks if the box is displayed 
    }

    //this method won't be called because the page is loaded only after clicking book table button 
    @Override
    public void load() {
        BFLogger.logError("MyThaiStar booking confirmation page was not loaded."); //logs error 
    }

    @Override
    public String pageTitle() {
        return "My Thai Star"; 
    }

    public void confirmBookingData() {
        WebElement sendButton = getDriver().findElementDynamic(sendButtonSearch); //creates a new WebElement to access confirmation button
        sendButton.click(); //clicks the send button
    }
    
    public void cancelBookingData() {
        WebElement cancelButton = getDriver().findElementDynamic(cancelButtonSearch); //creates a new WebElement to access resignation button
        cancelButton.click(); //clicks the cancel button
    }
}
----

image::images/image4.png[]

After the click on Send button - the green confirmation dialogue appears with the message "Table successfully booked":

image::images/image5.png[]

To be able to check if the booking was successful, you should go back to the BookTablePage class and add one more method in order to check if the green box was displayed:

----
/** Dialog search criteria */
private static final By dialogSearch = By.className("bgc-green-600");

public boolean checkConfirmationDialog() {
    WebElement greenConfirmationDialog = getDriver().findElementDynamic(dialogSearch); //creates a new WebElement to access confirmation dialog
    
    return greenConfirmationDialog.isDisplayed(); //checks if the dialog is displayed 
}
----

==== 3. Create BookTableTest class

At this point you can start creating a test class:

----
import static org.junit.Assert.assertTrue;

public class BookTableTest extends BaseTest {
    private static BookTablePage bookTablePage = new BookTablePage(); //the field contains book table page object 
    
    @BeforeClass
    public static void setUpBeforeClass() {
        bookTablePage.load(); //loads book table page
    }
    
    @AfterClass
    public static void tearDownAfterClass() {

    }
    
    @Override
    public void setUp() {
        if (!bookTablePage.isLoaded()) {
            bookTablePage.load(); //if the page is not loaded, loads it
        }
    }
    
    @Override
    public void tearDown() {

    }
}
----

==== 4. Write the first test

You can prepare our first test method using the methods from page classes

----
@Test
public void Test_BookTableAndCheckConfirmation() {
    String date = "07/23/2019 1:00 PM"; //replace with tommorow's date in format "MM/dd/yyyy hh:mm a"
    String name = "Smith"; //name field
    String email = "smith@somemail.com"; //email field 
    int guests = 3; //number of guests 

    //enters booking data and returns a new confirmation page 
    ConfirmBookPage confirmBookPage = bookTablePage.enterBookingData(date, name, email, guests); 
    confirmBookPage.confirmBookingData(); //confirms booking
    
    //checks if the green dialog box appears, if it does, test is passed, if not, the test failed and displays message given in the first argument 
    assertTrue("Test failed: Table not booked", bookTablePage.checkConfirmationDialog()); //returns true if dialog box appears and false if not 
}
----

==== 5. Run the test

Run the test by right-clicking on the test method -> Run as -> JUnit test. 

image::images/image6.png[]
