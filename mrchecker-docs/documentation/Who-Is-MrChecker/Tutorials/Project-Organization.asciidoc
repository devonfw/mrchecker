= Project organization

== Import project

To import a MrChecker project into IntelliJ IDEA, follow these steps:

1. Open IntelliJ IDEA and select "File" -> "Open" from the menu.
+
image::images/intellij_1.png[]
+
2. Navigate to the project path and select the root folder of the MrChecker project.
Click "OK" to proceed.
+
image::images/intellij_2.png[]
+

Your MrChecker project is now ready for development.
+
image::images/intellij_3.png[]

== Use example as project template

To create a new standalone MrChecker project and customize its configuration using example you have to follow this process:

=== Initial Step: Choose Example and Move to a Separate Folder

1. Open your file explorer and navigate to the location of the MrChecker examples.

2. Choose one of the examples that you want to use as a template for your new project.

3. Create a new folder for your project and move the selected example into this folder.

When you have the example in the separated folder, which you want to use as the project template you can move to the following steps:

1. Open IntelliJ IDEA and go to "File" -> "New" -> "Project from Existing Sources"
+
image::images/intellij_4.png[]
+

2. Navigate to the folder containing your example project and click "OK."
+
image::images/intellij_5.png[]
+

3. Select "Import project from external model" and choose "Maven." Click "Create"
+
image::images/intellij_6.png[]
+

4. After importing, open the `pom.xml` file in the new project.
+

4.1. Remove `<parent>` tag
+
4.2. Replace `your.new.groupId`, `your-new-artifactId`, `your-new-version`, `Your New Developer Name`, `your.new.email@example.com`, `Your New Organization`, and `http://your.new.organization.url` with the updated values.
+
----
    <groupId>your.new.groupId</groupId>
    <artifactId>your-new-artifactId</artifactId>
    <version>your-new-version</version>

    <developers>
        <developer>
            <name>Your New Developer Name</name>
            <email>your.new.email@example.com</email>
            <organization>Your New Organization</organization>
            <organizationUrl>http://your.new.organization.url</organizationUrl>
        </developer>
    </developers>
----

== Creating New Packages

To organize your MrChecker project, you will need two new packages: one for the new page classes and the other for test classes.

* Create a package for page classes:

- Open IntelliJ IDEA.
- Use the "Project" tool window on the left.
- Navigate to [your-project] -> src -> main -> java -> com.capgemini.mrchecker -> selenium.
- Right-click on "selenium."
- Choose "New" -> "Package."
- Name the new package "com.capgemini.mrchecker.selenium.pages.[your-product-name]."

* Create a package for test classes:

- Navigate to [your-project] -> src -> test -> java -> com.capgemini.mrchecker -> selenium.
- Right-click on "selenium."
- Choose "New" -> "Package."
- Name the new package "com.capgemini.mrchecker.selenium.tests.[your-product-name]."

== Creating new Page Classes

- Navigate to: [your-project] → src/main/java → com.capgemini.mrchecker → selenium.pages.[your-product-name]
- Click on "New" → New Class
- Enter the name "YourPage"

Every Page Class should extend BasePage class.
Import all necessary packages and override all required methods:

* public boolean isLoaded() - returns true if the page is loaded and false if not
* public void load() - loads the page
* public String pageTitle() - returns page title

Example:

[source,java]
----
 public class MainPage extends BasePage {

    @Override
    public boolean isLoaded() {
        return false; 
    }
    
    @Override
    public void load() {
        BFLogger.logDebug("Load 'Main Page'"); 
    }
    
    @Override
    public String pageTitle() {
        return "Main Page Title"; 
    }
 }
----

== Creating new Test Classes

- Navigate to  [your-project] → src/test/java → com.capgemini.mrchecker → selenium.tests.[your-product-name]
- Click on "New" → New Class
- Enter the name "YourCaseTest"

Test classes should extend BaseTest class, import all necessary packages and override all required methods:

* public void setUp() - executes before each test
* public void tearDown() - executes after each test

Optionally, it is also possible to implement the following methods:

* @BeforeAll public static void setUpBeforeAll() - runs only once before all tests
* @AfterAll public static void tearDownAfterAll() - runs only once after performing all tests

Every test method has to be signed with "@Test" parameter.

[source,java]
----
 import com.capgemini.mrchecker.selenium.example.page.MainPage;
import com.capgemini.mrchecker.test.core.BaseTest;
import com.capgemini.mrchecker.test.core.utils.PageFactory;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Test;

public class YourCaseTest extends BaseTest {
	private final MainPage mainPage = PageFactory.getPageInstance(MainPage.class);

	// This method is executed once before all test methods in the class.
	@BeforeAll
	public static void setUpBeforeAll() {

	}

	// This method is executed once after all test methods in the class.
	@AfterAll
	public static void tearDownAfterAll() {

	}

	// This method is executed before each test method in the class.
	@Override
	public void setUp() {
		// Load the main page before each test.
		mainPage.load();
	}

	// This method is executed after each test method in the class.
	@Override
	public void tearDown() {

	}

	// This is a sample test method.
	@Test
	public void shouldTestRunWithoutReturningError() {
		// Add test logic here
	}
}
----

== Running Tests

Run the test by right-clicking on the test method → Run as → JUnit test.

