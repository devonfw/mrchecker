:toc: macro

= Tutorial: Processing HTTP Status Codes

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

This tutorial demonstrates how to process HTTP status codes returned by a web page.
When you click on a status code link, you will be redirected to a subpage that returns the corresponding HTTP status code.
You can check the code number by inspecting the headers section in the developer tools.

image::images/example56.png[]

image::images/example57.png[]

== What You Will Learn

In this tutorial, you will learn:

* How to interact with status code links on a web page.
* How to extract and verify HTTP status codes from responses.
* How to write test cases to validate status code processing.

== Page Class

=== Status Codes Home Page

[source,java]
----
public class StatusCodesHomePage extends BasePage {
	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.STATUS_CODES.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Status Codes' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.STATUS_CODES.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Clicks code link according to given code number.
	 *
	 * @param code
	 *            Given code
	 */
	public void clickCodeLink(String code) {
		clickCodeLink(By.linkText(code));
	}

	private void clickCodeLink(By selector) {
		getDriver().findElementDynamic(selector)
				.click();
	}
}
----

The `StatusCodesHomePage` class contains methods to interact with the Status Codes Home Page, including clicking on status code links, verifying if links are displayed, and navigating to code pages.

Create a page class for status codes subpages as well.
In the class constructor specify which code number should be returned.

=== Status Codes Code Page Class

[source,java]
----
public class StatusCodesCodePage extends BasePage {
	private final By	selectorDisplayedText	= By.cssSelector("#content > div > p");
	private final By	selectorLinkToCodesPage	= By.cssSelector("#content > div > p > a");

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.STATUS_CODES.getValue() + '/');
	}

	@Override
	public void load() {
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Verifies if page is loaded with given code number.
	 *
	 * @param codeNumber
	 *            Expected code number
	 * @return true if expected code number is loaded with web page
	 */
	public boolean isLoadedWithStatusCode(String codeNumber) {
		return getDriver().getCurrentUrl()
				.equals(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
						PageSubURLsProjectYEnum.STATUS_CODES.getValue() + "/" + codeNumber);
	}

	/**
	 * Returns displayed code number.
	 * <p>
	 * Code number is retrieved from following text displayed on the page:<b>
	 * 'This page returned a *** status code.', where *** represent the code number to be
	 * returned.
	 * </p>
	 *
	 * @return String object representing the displayed code number retrieved from specific sentence.
	 */
	public String getDisplayedCodeNumber() {
		return getDriver().findElementDynamic(selectorDisplayedText)
				.getText()
				.substring(21, 24);
	}

	/**
	 * Clicks link to return to 'Code Page'.
	 *
	 * @return StatusCodesHomePage object
	 */
	public void clickLinkToCodePage() {
		getDriver().findElementDynamic(selectorLinkToCodesPage)
				.click();
	}
}
----

The `StatusCodesCodePage` class represents subpages that return specific HTTP status codes.
It includes methods to verify if a code page is loaded with an expected code number, extract the displayed code number, and navigate back to the Status Codes Home Page.

== Test Class

Before test: Open Status Codes subpage on The Main Internet Page

Steps:

For each status code

1. Click code link
2. Check if the page is loaded with an expected code number
3. Check if the displayed code number equals the expected number
4. Go back to Status Codes Home Page

[source,java]
----
public class StatusCodeTest extends BaseTest {
	private final String[]				codes				= { "200", "301", "404", "500" };
	private final StatusCodesHomePage	statusCodesHomePage	= PageFactory.getPageInstance(StatusCodesHomePage.class);
	private final StatusCodesCodePage	statusCodesCodePage	= PageFactory.getPageInstance(StatusCodesCodePage.class);

	@Override
	public void setUp() {
		statusCodesHomePage.load();
		BFLogger.logInfo("Verify if Status Codes Home page is opened");
		assertTrue(statusCodesHomePage.isLoaded(), "Unable to open Status Codes Home page");
	}

	@Test
	public void shouldProperCodeBeDisplayedAfterClickCodeLink() {
		for (String code : codes) {
			BFLogger.logInfo("Click link to " + code + " code");
			statusCodesHomePage.clickCodeLink(code);

			BFLogger.logInfo("Verify if proper web page corresponding to the code is opened");
			assertTrue(statusCodesCodePage.isLoadedWithStatusCode(code),
					"Unable to open proper web page");

			BFLogger.logInfo("Verify if the displayed code is equal to the expected one");
			assertEquals(code, statusCodesCodePage.getDisplayedCodeNumber(),
					"Wrong code has been displayed");

			BFLogger.logInfo("Click link to come back to 'Status Codes' page");
			statusCodesCodePage.clickLinkToCodePage();
		}
	}
}
----

== Conclusion

In this tutorial, you've learned how to process HTTP status codes returned by web pages.
You can click on status code links, inspect network requests using developer tools, and validate the returned status codes.
This knowledge is valuable when testing web applications that rely on specific HTTP status codes for functionality.
