:toc: macro

= Tutorial: Open Elemental Subpage from A/B Testing

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== What You Will Learn

In this test case, you will learn how to navigate to a subpage and interact with links using Selenium WebDriver.
Specifically, you will open the A/B Testing subpage, click an Elemental Selenium link that opens in a new tab, switch to the new tab, and check if the Elemental Selenium page is loaded successfully.

== Example

image::images/example1.png[]

Steps:

1. Open A/B Test subpage on The Internet Main Page
2. Click Elemental Selenium link and open it in new tab
3. Switch to Elemental Selenium page and check if it's loaded

image::images/example2.png[]

== Page Classes

=== A/B Test Page

Create a Page class for the A/B Testing page.
This page class represents the A/B Testing page and provides methods to interact with it.

[source,java]
----
 public class ABTestPage extends BasePage {
    private static final By selectorElementalSeleniumLink = By.cssSelector("div > div > a");

    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded();
        return getDriver().getCurrentUrl()
                .contains(PageSubURLsEnum.ABTEST.getValue());
    }

    @Override
    public void load() {
        BFLogger.logDebug("Load 'A/B Test Control' page.");
        getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
                PageSubURLsEnum.ABTEST.getValue());
        getDriver().waitForPageLoaded();
    }

    @Override
    public String pageTitle() {
        return getActualPageTitle();
    }

    /**
     * Clicks 'Elemental Selenium' link at the bottom of the page.
     */
    public void clickElementalSeleniumLink() {
        getDriver().findElementDynamic(selectorElementalSeleniumLink)
                .click();
        getDriver().waitForPageLoaded();
    }

    /**
     * Switches window to the next one - different from the current.
     */
    public void switchToNextTab() {
        ArrayList<String> tabsList = new ArrayList<>(getDriver().getWindowHandles());
        getDriver().switchTo()
                .window(tabsList.get(1));
    }
}
----

=== Elemental Selenium Page Class

Create a Page class for the Elemental Selenium page.
This page class represents the Elemental Selenium subpage and provides methods to interact with it.

[source,java]
----
 public class ElementalSeleniumPage extends BasePage {
    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded();
        return getDriver().getCurrentUrl()
                .contains(GetEnvironmentParam.ELEMENTAL_SELENIUM_URL.getValue());
    }

    @Override
    public void load() {

    }

    @Override
    public String pageTitle() {
        return getActualPageTitle();
    }
}
----

== Test Class

Create a test class tailored for the A/B Testing scenario.
This class contains methods and assertions, ensuring a detailed test execution process.

`shouldOpenElementalSeleniumPageWhenClickElementalSeleniumLink()` - A test case method that performs a series of steps and asserts the expected outcome.

[source,java]
----
 class ABTest extends BaseTest {
    private final ABTestPage abTestPage = PageFactory.getPageInstance(ABTestPage.class);
    private final ElementalSeleniumPage elementalSeleniumPage = PageFactory.getPageInstance(ElementalSeleniumPage.class);

    @Test
    void shouldOpenElementalSeleniumPageWhenClickElementalSeleniumLink() {
        BFLogger.logInfo("Click Elemental Selenium link");
        abTestPage.clickElementalSeleniumLink();

        BFLogger.logInfo("Switch browser's tab to newly opened one");
        abTestPage.switchToNextTab();

        BFLogger.logInfo("Verify if Elemental Selenium Page is opened");
        assertTrue(elementalSeleniumPage.isLoaded(), "Unable to open Elemental Selenium page");
    }
}
----

== Conclusion

In this tutorial, we explored how to navigate web pages, interact with links, and manage multiple tabs using Selenium WebDriver.
You learned how to open the A/B Testing subpage, click an Elemental Selenium link that opens in a new tab, switch to the new tab, and verify if the Elemental Selenium page loaded successfully.




