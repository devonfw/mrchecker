image::images/example1.png[]

The goal of this test is to open A/B Test subpage and redirect to another website. 

Steps: 

1. Open The Internet Main Page 
2. Click A/B Testing link and go to A/B Test subpage 
3. Click Elemental Selenium link and open it in new tab 
4. Switch to Elemental Selenium page and check if it's loaded 

image::images/example2.png[]

===== Page Class 

Create a Page class for AB Testing page. Override all the required methods:

----
 public class ABtestPage extends BasePage {

    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded(); 
        return getDriver().getCurrentUrl()
                .contains(PageSubURLsProjectYEnum.ABTEST.getValue()); 
    }

    @Override
    public void load() {
        BFLogger.logDebug("Load 'A/B Test Control' page."); 
        getDriver().get(GetEnvironmentParam.THE_INTERNET_MAIN_PAGE.getValue() +
                PageSubURLsProjectYEnum.ABTEST.getValue()); 
        getDriver().waitForPageLoaded(); 
    }

    @Override
    public String pageTitle() {
        return getActualPageTitle(); 
    }
 } 
----
 
===== How to use Enum?
 
Similarly as in environmental variables case, create an enum for storing values of subURLs: 
 
----
 public enum PageSubURLsProjectYEnum {

    BASIC_AUTH("basic_auth"),
    NEW_WINDOW("windows/new"),
    WINDOW("windows"),
    CHECKBOX("checkboxes"),
    CONTEXT_MENU("context_menu"),
    KEY_PRESS("key_presses"),
    DYNAMIC_CONTENT("dynamic_content"),
    HOVERS("hovers"),
    SORTABLE_DATA_TABLES("tables"),
    REDIRECT("redirector"),
    JAVASCRIPT_ALERTS("javascript_alerts"),
    CHALLENGING_DOM("challenging_dom"),
    STATUS_CODES("status_codes"),
    LOGIN("login"),
    ABTEST("abtest"),
    BROKEN_IMAGES("broken_images"),
    DROPDOWN("dropdown"),
    HORIZONTAL_SLIDER("horizontal_slider"),
    DOWNLOAD("download"),
    FORGOT_PASSWORD("forgot_password"),
    FORGOT_PASSWORD_EMAIL_SENT("email_sent"),
    EXIT_INTENT("exit_intent"),
    DYNAMIC_LOADING("dynamic_loading"),
    DISAPPEARING_ELEMENTS("disappearing_elements"),
    DRAG_AND_DROP("drag_and_drop"),
    DYNAMIC_CONTROLS("dynamic_controls"),
    UPLOAD("upload"),
    FLOATING_MENU("floating_menu"),
    FRAMES("frames"),
    GEOLOCATION("geolocation"),
    INFINITE_SCROLL("infinite_scroll"),
    JQUERY_UI("jqueryui/menu"),
    JAVASCRIPT_ERROR("javascript_error"),
    LARGE_AND_DEEP_DOM("large"),
    NESTED_FRAMES("nested_frames"),
    NOTIFICATION_MESSAGE("notification_message"),
    DOWNLOAD_SECURE("download_secure"),
    SHIFTING_CONTENT("shifting_content"),
    SLOW_RESOURCES("slow"),
    TYPOS("typos"),
    WYSIWYGEDITOR("tinymce");

    /*
     * Sub URLs are used as real locations in the test environment
     */
    private String subURL;

    private PageSubURLsProjectYEnum(String subURL) {
        this.subURL = subURL;
    }

    ;

    private PageSubURLsProjectYEnum() {

    }

    @Override
    public String toString() {
        return getValue();
    }

    public String getValue() {
        return subURL;
    }

}
----

Instead of mapping data from an external file, you can store and access them directly from the enum class: 

 PageSubURLsProjectYEnum.ABTEST.getValue()
 
==== Selector
 
In this test case you need selector for only one page element:
 
  private static final By elementalSeleniumLinkSelector = By.cssSelector("div > div > a");
  
==== Page methods
 
You need two methods for performing page actions: 
 
----
     /**
     * Clicks 'Elemental Selenium' link at the bottom of the page.
     *
     * @return ElementalSeleniumPage object.
     */
    public ElementalSeleniumPage clickElementalSeleniumLink() {
        getDriver().findElementDynamic(elementalSeleniumLinkSelector)
                .click();  
        getDriver().waitForPageLoaded();  
        return new ElementalSeleniumPage();  
    }

    /**
     * Switches window to the next one - different than the current.
     */
    public void switchToNextTab() {
        ArrayList<String> tabsList = new ArrayList<String>(getDriver().getWindowHandles()); 
        getDriver().switchTo() 
                .window(tabsList.get(1)); 
    }
----
 
==== Elemental Selenium Page Class
 
To return new Elemental Selenium Page object, implement its class. You only need to write basic methods to check if the page is loaded. There is no need to interact with objects on the site:
 
----
 public class ElementalSeleniumPage extends BasePage {

    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded();
        return getDriver().getCurrentUrl()
                .contains(GetEnvironmentParam.ELEMENTAL_SELENIUM_PAGE.getValue());
    }

    @Override
    public void load() {
        BFLogger.logDebug("Load 'Elemental Selenium' page.");
        getDriver().get(GetEnvironmentParam.ELEMENTAL_SELENIUM_PAGE.getValue());
        getDriver().waitForPageLoaded();
    }

    @Override
    public String pageTitle() {
        return getActualPageTitle();
    }
}
----
 
==== Test Class 
 
Create a Test class and write a @Test method to execute the scenario: 
 
----
 @Category({ TestsSelenium.class, TestsChrome.class, TestsFirefox.class, TestsIE.class })
public class ABtestingTest extends TheInternetBaseTest {

    private static ABtestPage abTestPage;

    @Test
    public void shouldOpenElementalSeleniumPageWhenClickElementalSeleniumLink() {

        logStep("Click Elemental Selenium link"); 
        ElementalSeleniumPage elementalSeleniumPage = abTestPage.clickElementalSeleniumLink(); 

        logStep("Switch browser's tab to newly opened one"); 
        abTestPage.switchToNextTab(); 

        logStep("Verify if Elemental Selenium Page is opened"); 
        assertTrue("Unable to open Elemental Selenium page", elementalSeleniumPage.isLoaded()); 
    }

}
----

==== Assert

Asserts methods are used for creating test pass or fail conditions. The optional first parameter is a message which will be displayed in the test failure description. 

* assertTrue(boolean condition) - test passes if condition returns true 
* assertFalse(boolean condition) - test passes if condition returns false 

Also, add the @BeforeClass method to open the tested page: 

----
 @BeforeClass
    public static void setUpBeforeClass() {
        abTestPage = shouldTheInternetPageBeOpened().clickABtestingLink(); 
        logStep("Verify if ABTest page is opened"); 
        assertTrue("Unable to open ABTest page", abTestPage.isLoaded());
    }
----
 
@BeforeClass method executes only once before all other 
@Test cases in the class. There is also a possibility to create a 
@AfterClass method which is performed also once after all @Test cases. 

You don't need to implement @setUp and @tearDown methods because they're already in TheInternetBaseTest class which you extend. 

==== Categories

You can group tests in categories. It's useful when running many tests at once. Use this parameter: 

 @Category({ TestsSelenium.class, TestsChrome.class, TestsFirefox.class, TestsIE.class }) 
 
Then create an interface representing each category. Example: 

----
public interface TestsSelenium {
    /* For test which are testing web pages considering UI (user interface) and using selenium webdriver */
}
----

To run a test from specified category create Test Suite class:  

----
@RunWith(WildcardPatternSuite.class) //search for test files under /src/test/java
@IncludeCategories({ TestsChrome.class }) // search all test files with category TestsChrome.class
@ExcludeCategories({ TestsLocal.class, TestsNONParallel.class }) //exclude all test files with category TestsLocal.class and TestsNONParallel.class 
@SuiteClasses({ "../**/*Test.class" }) //search only test files, where file name ends with <anyChar/s>Test.class 

public class _TestSuiteChrome {

}
----

You can run a Test Suite as a JUnit test. 



