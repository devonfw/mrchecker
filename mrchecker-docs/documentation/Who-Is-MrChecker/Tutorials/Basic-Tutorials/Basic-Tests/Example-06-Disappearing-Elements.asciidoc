:toc: macro

= Tutorial: Testing Changing Website Content

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== What You Will Learn

In this tutorial, you will learn how to test changing website content.
Specifically, you will observe the appearance and disappearance of elements on a web page after refreshing it multiple times.

== Example

image::images/example9.png[]

After refreshing page (F5) a few times, a new element should appear:

image::images/example10.png[]

Then, after another couple of refreshes, it should disappear.

You can check in developer mode that Gallery element does not exist in HTML document either, until appearing on the page.
The element is created by Javascript.

image::images/example11.png[]
image::images/example12.png[]

Steps:

1. Open Disappearing Elements subpage on The Internet Main Page
2. Check if Menu Buttons exist on the page
3. Refresh the page until a new element appears
4. Check if Gallery Button exists
5. Check if the number of buttons equals the expected value
6. Refresh the page until an element disappears
7. Check if Gallery Button does not exist
8. Check if the number of buttons is smaller than before

== Page Class

=== Disappearing Elements Page

[source,java]
----
public class DisappearingElementsPage extends BasePage {
	private static final By	selectorGalleryMenuButton	= By.cssSelector("li > a[href*=gallery]");
	private static final By	selectorMenuButtons			= By.cssSelector("li");

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.DISAPPEARING_ELEMENTS.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Disappearing Elements' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.DISAPPEARING_ELEMENTS.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Returns a number of WebElements representing menu buttons.
	 *
	 * @return A number of WebElements.
	 */
	public int getNumberOfMenuButtons() {
		return getDriver().findElementDynamics(selectorMenuButtons)
				.size();
	}

	/**
	 * Returns WebElement representing disappearing element of menu.
	 *
	 * @return Disappearing WebElement if visible, null otherwise.
	 */
	public WebElement getGalleryMenuElement() {
		return getDriver().findElementQuietly(selectorGalleryMenuButton);
	}

	/**
	 * Refreshes web page as many times as it is required to appear/disappear menu button
	 * WebElement.
	 *
	 * @param shouldAppear
	 *            Determines if element should appear (true) or disappear (false).
	 */
	public void refreshPageUntilWebElementAppears(boolean shouldAppear) {
		int numberOfAttempts = 5;
		int counter = 0;
		while (!isVisibilityAsExpected(shouldAppear) || isMaxNumberOfAttemptsReached(counter++,
				numberOfAttempts)) {
			refreshPage();
		}
	}

	/**
	 * Verify if visibility of Gallery button is the same as expected
	 *
	 * @param expected
	 *            Determines if element should be visible (true) or not visible (false).
	 */
	private boolean isVisibilityAsExpected(boolean expected) {
		boolean isVisibilityDifferentThanExpected = isGalleryMenuElementVisible() ^ expected;
		return !isVisibilityDifferentThanExpected;
	}

	private boolean isGalleryMenuElementVisible() {
		boolean result = false;
		WebElement gallery = getGalleryMenuElement();
		if (gallery != null)
			result = gallery.isDisplayed();
		return result;
	}

	private boolean isMaxNumberOfAttemptsReached(int attemptNo, int maxNumberOfAttempts) {
		return attemptNo == maxNumberOfAttempts;
	}
}
----

The `DisappearingElementsPage` class contains methods to interact with the Disappearing Elements page.
It includes functionality to check if menu buttons exist on the page, refresh the page until a new element appears or disappears, and verify the visibility of the gallery button.

`findElementQuietly(By selector)` works similar as `findElementDynamics(By selector)` but won't throw an exception if an element wasn't found.
In this case, the searched WebElement will have a NULL value.

== Test Class

[source,java]
----
public class DisappearingElementsTest extends BaseTest {
	private final DisappearingElementsPage disappearingElementsPage = PageFactory.getPageInstance(DisappearingElementsPage.class);

	private final int	totalNumberOfMenuButtons	= 5;
	private int			numberOfMenuButtons			= 0;

	@Override
	public void setUp() {
		disappearingElementsPage.load();
		BFLogger.logInfo("Verify if Disappearing Elements page is opened");
		assertTrue(disappearingElementsPage.isLoaded(), "Unable to open Disappearing Elements page");

		BFLogger.logInfo("Verify if menu button elements are visible");
		numberOfMenuButtons = disappearingElementsPage.getNumberOfMenuButtons();
		assertTrue(numberOfMenuButtons > 0, "Unable to display menu");
	}

	@Test
	public void shouldMenuButtonElementAppearAndDisappearAfterRefreshTest() {
		BFLogger.logInfo("Click refresh button until menu button appears");
		disappearingElementsPage.refreshPageUntilWebElementAppears(true);

		BFLogger.logInfo("Verify if menu button element appeared");
		assertNotNull(disappearingElementsPage.getGalleryMenuElement(),
				"Unable to disappear menu button element");
		assertEquals(totalNumberOfMenuButtons, disappearingElementsPage.getNumberOfMenuButtons(),
				"The number of button elements after refresh is incorrect");

		BFLogger.logInfo("Click refresh button until menu button disappears");
		disappearingElementsPage.refreshPageUntilWebElementAppears(false);

		BFLogger.logInfo("Verify if menu button element disappeared");
		assertNull(disappearingElementsPage.getGalleryMenuElement(),
				"Unable to appear menu button element");
		assertTrue(totalNumberOfMenuButtons > disappearingElementsPage.getNumberOfMenuButtons(),
				"The number of button elements after refresh is incorrect");
	}
}
----

`assertNull(Objetc object)` - test passes if Object returns NULL
`assertNotNull(Objetc object)` - test passes if Object does not return NULL

In the test method `shouldMenuButtonElementAppearAndDisappearAfterRefreshTest()`, the goal is to repeatedly refresh the page until the gallery button appears and disappears.
The test then checks if the button's visible and the number of buttons on the page match the expected values.

== Conclusion

In this tutorial, you've learned how to test changing website content by observing the appearance and disappearance of elements on a web page.
This testing technique can help ensure that the website's dynamic content behaves as expected.
