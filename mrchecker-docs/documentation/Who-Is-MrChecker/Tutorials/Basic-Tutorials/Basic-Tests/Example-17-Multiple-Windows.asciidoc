= Tutorial: Operating on Multiple Browser Tabs

== What you will learn

In this tutorial, you will learn how to:

- Interact with web pages to open a new browser tab.
- Handle multiple browser tabs while automating web tests.
- Check if a new web page has successfully opened in a new tab.

This simple example demonstrates how to operate on multiple browser tabs.
When you click the link, a new website will be opened in the second tab.

image::images/example48.png[]

image::images/example49.png[]

== Page Class

[source,java]
----
public class MultipleWindowsPage extends BasePage {
    
    private final static By selectorLink = By.cssSelector("#content > div > a");
    
    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded();
        return getDriver().getCurrentUrl()
                .contains(PageSubURLsProjectYEnum.WINDOW.getValue());
    }
    
    @Override
    public void load() {
        BFLogger.logDebug("Load 'Opening a new window' page.");
        getDriver().get(GetEnvironmentParam.THE_INTERNET_MAIN_PAGE.getValue() +
                PageSubURLsProjectYEnum.WINDOW.getValue());
        getDriver().waitForPageLoaded();
    }
    
    @Override
    public String pageTitle() {
        return getActualPageTitle();
    }
    
    /**
     * Clicks 'click here' link.
     *
     * @return NewWindowPage object
     */
    public NewWindowPage clickHereLink() {
        getDriver().findElementDynamic(selectorLink)
                .click();
        getDriver().waitForPageLoaded();
        return new NewWindowPage();
    }   
}
----

The `MultipleWindowsPage` class is responsible for interacting with the web page.
It includes methods to check if the page is loaded, load the page, and click a link that opens a new website in a new browser tab.

Additionally, there is a `NewWindowPage` class for handling the new tab, which implements the required methods.

[source,java]
----
public class NewWindowPage extends BasePage {
    
    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded();
        return getDriver().getCurrentUrl()
                .contains(PageSubURLsProjectYEnum.NEW_WINDOW.getValue());
    }
    
    @Override
    public void load() {
        BFLogger.logDebug("Load 'New window' page.");
        getDriver().get(GetEnvironmentParam.THE_INTERNET_MAIN_PAGE.getValue() +
                PageSubURLsProjectYEnum.NEW_WINDOW.getValue());
        getDriver().waitForPageLoaded();
    }
    
    @Override
    public String pageTitle() {
        return getActualPageTitle();
    }
}
----

The `NewWindowPage` class is used to handle the new browser tab that opens when the link is clicked.
It includes methods to check if the page is loaded and load the page.

== Test Class

Steps:

1. Open The Internet Main Page
2. Go to Multiple Windows Page
3. Click the link
4. Check if a new page is opened in the second tab

[source,java]
----
@Category({ TestsSelenium.class, TestsChrome.class, TestsFirefox.class, TestsIE.class })
public class MultipleWindowsTest extends TheInternetBaseTest {
    
    private static MultipleWindowsPage    multipleWindowsPage;
    private static NewWindowPage        newWindowPage;
    
    @BeforeClass
    public static void setUpBeforeClass() {
        multipleWindowsPage = shouldTheInternetPageBeOpened().clickmultipleWindowsLink();
        
        logStep("Verify if Multiple Windows page is opened");
        assertTrue("Unable to open Multiple Windows page", multipleWindowsPage.isLoaded());
    }
    
    @Test
    public void verifyIfNewBrowserWindowOpen() {
        logStep("Click 'Click here' link");
        newWindowPage = multipleWindowsPage.clickHereLink();
        
        logStep("Verify if 'New window page' is opened");
        assertTrue("Unable to open a new browser window", newWindowPage.isLoaded());
    }
}
----

== Conclusion

In this tutorial, you've learned how to interact with web pages to open a new browser tab, handle multiple browser tabs while automating web tests, and verify if a new web page has successfully opened in a new tab.
This skill is valuable for testing scenarios where multiple tabs or windows are involved in web applications.
