:toc: macro

= Tutorial: Checking Dimensions of Broken Images

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== What You Will Learn

In this test case, you will learn how to check the dimensions of broken images on a web page.
You'll discover how to access and compare the dimensions of multiple images and verify that they match the expected values.

== Example

image::images/example5.png[]

Steps:

1. Open Broken Image subpage on The Internet Main Page
2. Get the 3 images' dimensions and compare them with expected values

== Page Class

In this case, create an array of selectors to access images by index number:

[source,java]
----
public class BrokenImagePage extends BasePage {
	private static final By[] selectorsImages = { By.cssSelector("div > img:nth-child(2)"),
					By.cssSelector("div > img:nth-child(3)"),
					By.cssSelector("div > img:nth-child(4)") };

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.BROKEN_IMAGES.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Broken Images' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.BROKEN_IMAGES.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Returns an image height in pixels.
	 *
	 * @param imageIndex
	 *            An index of given image.
	 * @return Height of an image in pixels.
	 */
	public int getImageHeight(int imageIndex) {
		return getImageDimension(imageIndex).getHeight();
	}

	/**
	 * Returns an image width in pixels.
	 *
	 * @param imageIndex
	 *            An index of given image.
	 * @return Width of an image in pixels.
	 */
	public int getImageWidth(int imageIndex) {
		return getImageDimension(imageIndex).getWidth();
	}

	private Dimension getImageDimension(int imageIndex) {
		return getDriver().findElementDynamic(selectorsImages[imageIndex])
				.getSize();
	}
}
----

The `BrokenImagePage` class contains methods to interact with the Broken Image subpage.
It provides functionality to get the height and width of each image, facilitating easy comparison with expected dimensions.

== Test Class

Create @Test and @BeforeEach methods.
Save expected images' dimensions in class fields:

[source,java]
----
public class BrokenImagesTest extends BaseTest {
	private final BrokenImagePage brokenImagePage = PageFactory.getPageInstance(BrokenImagePage.class);

	private final int	expectedHeight	= 90;
	private final int	expectedWidth	= 120;

	@Override
	public void setUp() {
		brokenImagePage.load();
		BFLogger.logInfo("Verify if Broken Image page is opened");
		assertTrue(brokenImagePage.isLoaded(), "Unable to open Broken Image page");
	}

	@Test
	public void shouldImageSizesBeEqualToExpected() {
		for (int i = 0; i < 3; ++i) {
			BFLogger.logInfo("Verify size of image with index: " + i);
			assertEquals(expectedHeight,
					brokenImagePage.getImageHeight(i), "Height of image with index: " + i + " is incorrect");
			assertEquals(expectedWidth,
					brokenImagePage.getImageWidth(i), "Width of image with index: " + i + " is incorrect");
		}
	}
}
----

The `BrokenImagesTest` class includes the `shouldImageSizesBeEqualToExpected()` test method, which iterates through the images, retrieves their dimensions, and compares them with the expected values.
The test will pass only if each image matches the expected width and height.

== Conclusion

By following this example, you've learned how to check the dimensions of images on a web page, even when dealing with broken images or images without unique attributes.
This skill is valuable for validating visual elements in your test automation.