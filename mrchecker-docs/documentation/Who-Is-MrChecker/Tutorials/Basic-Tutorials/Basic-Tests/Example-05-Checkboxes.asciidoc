= Tutorial: Testing Checkboxes on a Web Page

== What You Will Learn

In this example, you will learn how to test checkboxes on a web page.
A checkbox is a simple web element that can be selected or unselected by clicking on it.

image::images/example7.png[]

A checkbox is a simple web element which can be selected or unselected by clicking on it.

== Case Steps

Follow these steps to test the checkboxes:

1. Open The Internet Main Page.
2. Click the Checkboxes link to go to the Checkboxes page.
3. Test if the first checkbox is unchecked.
4. Select the first checkbox.
5. Test if the first checkbox is checked.
6. Test if the second checkbox is checked.
7. Unselect the second checkbox.
8. Test if the second checkbox is unchecked.

== Page Class

Because both checkboxes are in one form, it's possible to locate them by one selector and then access each individual one by index.

image::images/example8.png[]

=== Checkboxes Page

[source,java]
----
public class CheckboxesPage extends BasePage {

    private final static By checkboxesFormSelector = By.cssSelector("#checkboxes");

    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded();
        return getDriver().getCurrentUrl()
                .contains(PageSubURLsProjectYEnum.CHECKBOX.getValue());
    }

    @Override
    public void load() {
        BFLogger.logDebug("Load 'Checkboxes' page.");
        getDriver().get(GetEnvironmentParam.THE_INTERNET_MAIN_PAGE.getValue() +
                PageSubURLsProjectYEnum.CHECKBOX.getValue());
        getDriver().waitForPageLoaded();
    }

    @Override
    public String pageTitle() {
        return getActualPageTitle();
    }

    /**
     * Verifies if checkbox form is visible on the page.
     *
     * @return true if checkboxes are present and displayed on the page
     */
    public boolean isElementCheckboxesFormVisible() {
        return getDriver().elementCheckbox(checkboxesFormSelector)
                .isDisplayed();
    }

    /**
     * Verifies if given checkbox is selected or not.
     *
     * @param index The index of given checkbox
     * @return true if given checkbox is selected
     */
    public boolean isCheckboxSelected(int index) {
        return getDriver().elementCheckbox(checkboxesFormSelector)
                .isCheckBoxSetByIndex(index);
    }

    /**
     * Selects given checkbox. Unselects, if it is already selected.
     *
     * @param index The index of given checkbox
     */
    public void selectCheckbox(int index) {
        CheckBox checkbox = getDriver().elementCheckbox(checkboxesFormSelector);
        if (isCheckboxSelected(index)) {
            checkbox.unsetCheckBoxByIndex(index);
        } else {
            checkbox.setCheckBoxByIndex(index);
        }
    }

}
 
----

The `CheckboxesPage` class contains methods to interact with the Checkboxes page.
It provides functionality to check if the checkboxes form is visible, check if a checkbox is selected, and select/unselect checkboxes.

== Test Class

[source,java]
----
@Category({ TestsSelenium.class, TestsChrome.class, TestsFirefox.class, TestsIE.class })
public class CheckboxesTest extends TheInternetBaseTest {

    private static CheckboxesPage checkboxesPage;

    @Override
    public void setUp() {
        checkboxesPage = shouldTheInternetPageBeOpened().clickCheckboxesLink();

        logStep("Verify if Checkboxes page is opened");
        assertTrue("Unable to open Checkboxes page", checkboxesPage.isLoaded());
    }

    @Test
    public void shouldCheckboxBeSelectedAfterClick() {

        logStep("Verify if first checkbox is not selected");
        assertFalse("The checkbox is selected", checkboxesPage.isCheckboxSelected(0));

        logStep("Select first checkbox");
        checkboxesPage.selectCheckbox(0);

        logStep("Verify if first checkbox is selected");
        assertTrue("The checkbox is not selected", checkboxesPage.isCheckboxSelected(0));
    }

    @Test
    public void shouldCheckboxBeUnselectedAfterClick() {

        logStep("Verify if second checkbox is selected");
        assertTrue("The checkbox is not selected", checkboxesPage.isCheckboxSelected(1));

        logStep("Select second checkbox");
        checkboxesPage.selectCheckbox(1);

        logStep("Verify if second checkbox is not selected");
        assertFalse("The checkbox is selected", checkboxesPage.isCheckboxSelected(1));
    }
}
----

The `CheckboxesTest` class contains two test methods.
The first method, `shouldCheckboxBeSelectedAfterClick()`, verifies if the first checkbox is initially unselected, selects it, and then checks if it becomes selected.
The second method, `shouldCheckboxBeUnselectedAfterClick()`, verifies if the second checkbox is initially selected, unselects it, and then checks if it becomes unselected.

After running Test Class both @Test cases will be performed.
Before each one, overrode setUp method will be executed.


