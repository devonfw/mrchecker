= Tutorial: Automating Dynamic Elements

== What you will learn

In this tutorial, you will learn how to interact with dynamically appearing elements on a web page

image::images/example40.png[]

This example demonstrates how to approach elements that dynamically appear after a user's action.
To understand this concept better, let's simulate a scenario where we move the mouse over an image to reveal an additional label.

image::images/example41.png[]

In some cases, elements may exist in the page's Document Object Model (DOM) all the time, but their display attributes change dynamically.
Importantly, there is no JavaScript involved, and the elements' visibility is managed by Cascading Style Sheets (CSS).

image::images/example42.png[]

== Page Class

[source,java]
----
public class HoversPage extends BasePage {

    private final static By selectorImages = By.cssSelector("div.figure > img");
    private final static By selectorNames  = By.cssSelector("div.figcaption h5");

    @Override
    public boolean isLoaded() {
        getDriver().waitForPageLoaded();
        return getDriver().getCurrentUrl()
                .contains(PageSubURLsProjectYEnum.HOVERS.getValue());
    }

    @Override
    public void load() {
        BFLogger.logDebug("Load 'Hovers' page.");
        getDriver().get(GetEnvironmentParam.THE_INTERNET_MAIN_PAGE.getValue() +
                PageSubURLsProjectYEnum.HOVERS.getValue());
        getDriver().waitForPageLoaded();
    }

    @Override
    public String pageTitle() {
        return getActualPageTitle();
    }

    /**
     * Moves mouse pointer over an image with given index.
     *
     * @param index An index of the picture, where mouse pointer should be moved
     */
    public void hoverOverAvatar(int index) {
        Actions action = new Actions(getDriver());
        WebElement avatarImage = getDriver().findElementDynamics(selectorImages)
                .get(index);
        action.moveToElement(avatarImage)
                .perform();
    }

    /**
     * Returns the information displayed under a picture with given index.
     *
     * @param index An index of the picture, where the information should be read
     * @return String object representing picture's information
     */
    public String getAvatarsInformation(int index) {
        return getDriver().findElementDynamics(selectorNames)
                .get(index)
                .getText();
    }
}
----

The `HoversPage` class is responsible for interacting with the web page.
It includes methods to check if the page is loaded, load the page, and perform actions such as hovering the mouse over images and retrieving information from the page.

== Actions

Actions class contains methods used to execute basic user actions such as mouse moving and clicking or keys sending.
Action or actions series will be performed after calling `perform()` method.

== Test Class

Steps:

1. Open The Internet Main Page
2. Go to Hovers page
3. Move mouse over random image
4. Check if displayed text is equal to expected.

[source,java]
----
@Category({ TestsSelenium.class, TestsChrome.class, TestsFirefox.class, TestsIE.class })
public class HoversTest extends TheInternetBaseTest {
    
    private static HoversPage    hoversPage;
    private final String[] names = { "name: user1", "name: user2", "name: user3" };
    
    @BeforeClass
    public static void setUpBeforeClass() {
        hoversPage = shouldTheInternetPageBeOpened().clickHoversLink();
        
        logStep("Verify if Hovers page is opened");
        assertTrue("Unable to open Hovers page", hoversPage.isLoaded());
    }
    
    @Test
    public void shouldProperInformationBeDisplayedWhenMousePointerHoveredOverRandomElement() {
        logStep("Hover mouse pointer over random element");
        int randomIndex = new Random().nextInt(names.length);
        hoversPage.hoverOverAvatar(randomIndex);
        assertEquals("Picture's information is different than expected", names[randomIndex],
                hoversPage.getAvatarsInformation(randomIndex));
    }   
}
----

== Conclusion

In this tutorial, you have learned how to automate interactions with dynamically appearing elements on a web page.
You now have the skills to handle scenarios where elements change based on user actions, enhancing your web automation capabilities.