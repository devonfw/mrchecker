:toc: macro

= Tutorial: Manipulating a Horizontal Slider

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

This tutorial demonstrates how to manipulate a horizontal slider.
You can move the slider using a mouse or arrow keys, and the page displays the set value.

image::images/example52.png[]

image::images/example53.png[]

== What You Will Learn

In this tutorial, you will learn:

* How to interact with a horizontal slider on a web page.
* How to verify if a web element (in this case, a horizontal slider) is visible.
* How to retrieve the start, middle, and end positions of a horizontal slider.
* How to move the slider using both keyboard arrow keys and mouse dragging.
* How to validate and correct the slider's position value.

== Page Class

[source,java]
----
public class HorizontalSliderPage extends BasePage {
	private final By	selectorHorizontalSlider	= By.cssSelector("div.sliderContainer");
	private final By	sliderSelector				= By.cssSelector("input");
	private final By	valueSelector				= By.cssSelector("#range");

	private final HorizontalSliderElement horizontalSlider;

	public HorizontalSliderPage() {
		horizontalSlider = getDriver().elementHorizontalSlider(selectorHorizontalSlider,
				sliderSelector, valueSelector, BigDecimal.ZERO, new BigDecimal(5),
				new BigDecimal("0.5"));
	}

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.HORIZONTAL_SLIDER.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Horizontal Slider' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.HORIZONTAL_SLIDER.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Validates if WebElement representing horizontal slider is visible on the page.
	 *
	 * @return true if horizontal slider is visible, false otherwise.
	 */
	public boolean isElementHorizontalSliderVisible() {
		return getDriver().elementHorizontalSlider(selectorHorizontalSlider)
				.isDisplayed();
	}

	/**
	 * Returns the value of slider's start position.
	 *
	 * @return BigDecimal representing the lowest possible value of slider.
	 */
	public BigDecimal getStartPosition() {
		return horizontalSlider.getMinRange();
	}

	/**
	 * Returns the value of slider's middle position.
	 *
	 * @return BigDecimal representing the average value between start and end position.
	 */
	public BigDecimal getMiddlePosition() {
		return horizontalSlider.getMaxRange()
				.subtract(horizontalSlider.getMinRange())
				.divide(new BigDecimal(2));
	}

	/**
	 * Returns the value of slider's end position.
	 *
	 * @return BigDecimal representing the highest possible value of slider.
	 */
	public BigDecimal getEndPosition() {
		return horizontalSlider.getMaxRange();
	}

	/**
	 * Returns current value of slider's position.
	 *
	 * @return BigDecimal representing current value of slider.
	 */
	public BigDecimal getCurrentPosition() {
		return horizontalSlider.getCurrentSliderValue();
	}

	/**
	 * Sets horizontal slider to a given position using one of the available methods: using keyboard
	 * or using mouse move.
	 *
	 * @param position
	 * @param method
	 */
	public void setSliderPositionTo(BigDecimal position, int method) {
		horizontalSlider.setSliderPositionTo(position, method);
	}

	/**
	 * Verifies the correctness of the given position value and rounds it when necessary.
	 *
	 * @param position
	 * @return Correct value of horizontal slider's position.
	 */
	public BigDecimal verifyAndCorrectPositionValue(BigDecimal position) {
		return horizontalSlider.verifyAndCorrectPositionValue(position);
	}
}
----

The `HorizontalSliderPage` class is responsible for interacting with the web page that contains the horizontal slider.
It includes methods to check if the page is loaded, load the page, retrieve slider positions, set slider positions, and more.

=== Horizontal Slider Element

This class implements methods which can perform actions on slider:

Create Slider Object using method:

* `getDriver().elementHorizontalSlider(By sliderContainerSelector, By sliderSelector, By valueSelector, BigDecimal minRange, BigDecimal maxRange, BigDecimal step)`

And use:

* `BigDecimal getMaxRange()`
* `BigDecimal getMinRange()`
* `BigDecimal getCurrentSliderValue()`
* `setSliderPositionTo(BigDecimal position, int method)` - moves slider to a given position.
If the position is not valid, it changes it to the nearest proper value.
Second parameter determinate movement method: 0 - Keyboard, 1 - Mouse
* `BigDecimal verifyAndCorrectPositionValue(BigDecimal position)` - returns nearest correct position

== Test Class

Before each case:

1. Open Horizontal Slider subpage on The Internet Main Page
2. Check if the slider is visible
3. Save start, middle and end position

Case 1 - Moving with the keyboard:

1. Move slider to start position, and check if the current position equals the beginning value
2. Move the slider to middle position, and check if the current position equals the middle value
3. Move slider to end position, and check if the current position equals the end value
4. Try to move slider before start position, and check if the current position equals the beginning value
5. Try to move slider after end position, and check if the current position equals the end value
6. Try to move the slider to an improperly defined position between start and middle, and check if the current position equals the corrected value
7. Try to move the slider to an improperly defined random position, and check if the current position equals the corrected value
8. Move the slider back to start position, and check if the current position equals the beginning value

Case 2 - Moving with a mouse: Repeat each Case 1 step using a mouse instead of keyboard

[source,java]
----
public class HorizontalSliderTest extends BaseTest {
	private final HorizontalSliderPage horizontalSliderPage = PageFactory.getPageInstance(HorizontalSliderPage.class);

	private BigDecimal	startPosition;
	private BigDecimal	middlePosition;
	private BigDecimal	endPosition;

	@Override
	public void setUp() {
		horizontalSliderPage.load();

		BFLogger.logInfo("Verify if Horizontal Slider page is opened");
		assertTrue(horizontalSliderPage.isLoaded(), "Unable to load Horizontal Slider page");

		BFLogger.logInfo("Verify if horizontal slider element is visible");
		assertTrue(horizontalSliderPage.isElementHorizontalSliderVisible(),
				"Horizontal slider is not visible");

		startPosition = horizontalSliderPage.getStartPosition();
		middlePosition = horizontalSliderPage.getMiddlePosition();
		endPosition = horizontalSliderPage.getEndPosition();
	}

	@Test
	public void shouldHorizontalSliderMoveWhenKeyboardArrowButtonsArePressed() {
		BigDecimal position;
		BFLogger.logInfo("Move slider to start position: " + startPosition);
		horizontalSliderPage.setSliderPositionTo(startPosition, HorizontalSliderElement.KEYBOARD);
		assertEquals(startPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		BFLogger.logInfo("Move slider to middle position: " + middlePosition);
		horizontalSliderPage.setSliderPositionTo(middlePosition, HorizontalSliderElement.KEYBOARD);
		assertEquals(horizontalSliderPage.verifyAndCorrectPositionValue(middlePosition),
				horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		BFLogger.logInfo("Move slider to end position: " + endPosition);
		horizontalSliderPage.setSliderPositionTo(endPosition, HorizontalSliderElement.KEYBOARD);
		assertEquals(endPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		position = startPosition.subtract(BigDecimal.ONE);
		BFLogger.logInfo("Move slider to position before start position: " + position);
		horizontalSliderPage.setSliderPositionTo(position, HorizontalSliderElement.KEYBOARD);
		assertEquals(startPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		position = endPosition.add(BigDecimal.ONE);
		BFLogger.logInfo("Move slider to position after end position: " + position);
		horizontalSliderPage.setSliderPositionTo(position, HorizontalSliderElement.KEYBOARD);
		assertEquals(endPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		position = middlePosition.divide(new BigDecimal(2));
		BFLogger.logInfo("Move slider to improperly defined position: " + position);
		horizontalSliderPage.setSliderPositionTo(position, HorizontalSliderElement.KEYBOARD);
		assertEquals(horizontalSliderPage.verifyAndCorrectPositionValue(position),
				horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		position = new BigDecimal(new BigInteger("233234"), 5);
		BFLogger.logInfo("Move slider to improperly defined random position: " + position);
		horizontalSliderPage.setSliderPositionTo(position, HorizontalSliderElement.KEYBOARD);
		assertEquals(horizontalSliderPage.verifyAndCorrectPositionValue(position),
				horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		BFLogger.logInfo("Move slider back to start position: " + startPosition);
		horizontalSliderPage.setSliderPositionTo(startPosition, HorizontalSliderElement.KEYBOARD);
		assertEquals(startPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");
	}

	@Test
	public void shouldHorizontalSliderMoveWhenMouseButtonIsPressedAndMouseIsMoving() {
		BigDecimal position;
		BFLogger.logInfo("Move slider to start position: " + startPosition);
		horizontalSliderPage.setSliderPositionTo(startPosition, HorizontalSliderElement.MOUSE);
		assertEquals(startPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		BFLogger.logInfo("Move slider to middle position: " + middlePosition);
		horizontalSliderPage.setSliderPositionTo(middlePosition, HorizontalSliderElement.MOUSE);
		assertEquals(horizontalSliderPage.verifyAndCorrectPositionValue(middlePosition),
				horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		BFLogger.logInfo("Move slider to end position: " + endPosition);
		horizontalSliderPage.setSliderPositionTo(endPosition, HorizontalSliderElement.MOUSE);
		assertEquals(endPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		position = startPosition.subtract(BigDecimal.ONE);
		BFLogger.logInfo("Move slider to position before start position: " + position);
		horizontalSliderPage.setSliderPositionTo(position, HorizontalSliderElement.MOUSE);
		assertEquals(startPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		position = endPosition.add(BigDecimal.ONE);
		BFLogger.logInfo("Move slider to position after end position: " + position);
		horizontalSliderPage.setSliderPositionTo(position, HorizontalSliderElement.MOUSE);
		assertEquals(endPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		position = middlePosition.divide(new BigDecimal(2));
		BFLogger.logInfo("Move slider to improperly defined position: " + position);
		horizontalSliderPage.setSliderPositionTo(position, HorizontalSliderElement.MOUSE);
		assertEquals(horizontalSliderPage.verifyAndCorrectPositionValue(position),
				horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		position = new BigDecimal(new BigInteger("212348"), 5);
		BFLogger.logInfo("Move slider to improperly defined random position: " + position);
		horizontalSliderPage.setSliderPositionTo(position, HorizontalSliderElement.MOUSE);
		assertEquals(horizontalSliderPage.verifyAndCorrectPositionValue(position),
				horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");

		BFLogger.logInfo("Move slider back to start position: " + startPosition);
		horizontalSliderPage.setSliderPositionTo(startPosition, HorizontalSliderElement.MOUSE);
		assertEquals(startPosition, horizontalSliderPage.getCurrentPosition(),
				"Fail to set horizontal sliders position");
	}
}
----

== Conclusion

In this tutorial, you've learned how to manipulate a horizontal slider on a web page using both keyboard arrow keys and mouse dragging.
This skill is useful when dealing with web applications that require user interaction with sliders or similar UI elements.
