image::images/example3.png[]

In this test case, the goal is to pass username and password authorization and login to the next page. 

Steps: 

1. Open The Internet Main Page 
2. Click on Basic Auth link 
3. Open pop-up login window 
4. Enter valid username and password 
5. Open next subpage and verify if the user logged in successfully.

===== Page Class

Create a page class which represents Basic Auth subpage after proper login. 

image::images/example4.png[]

Override all the required methods: 

----
public class BasicAuthPage extends BasePage {

    public BasicAuthPage() {

    }

    public BasicAuthPage(String login, String password) {
        this.enterLoginAndPasswordByUrl(login, password);
    }

    @Override
    public boolean isLoaded() {
        return true;
    }

    @Override
    public void load() {
        BFLogger.logDebug("load");
    }

    @Override
    public String pageTitle() {
        return getActualPageTitle();
    }
 
----

In order to verify a login, create a selector to access the visible message.

----
 private static final By selectorTextMessage = By.cssSelector("#content > div > p");
Then create a method to get message value: 

/**     
*       Returns message displayed by system after user's log in.     
*      @return String object representing message displayed by system after user's log in     
*/     
    public String getMessageValue() {         
                return getDriver().findElementDynamic(selectorTextMessage)
                    .getText();     
}
 
----
Also, create a method to access the pop-up login window and enter user credentials: 

----
    /**
     * Authenticates user using standard simple authentication popup.
     *
     * @param login    User's login
     * @param password User's password
     * @throws AWTException
     * @throws InterruptedException
     */
    public void enterLoginAndPassword(String login, String password) throws AWTException, InterruptedException {
        Robot rb = new Robot(); 

        Thread.sleep(2000);  

        StringSelection username = new StringSelection(login); 
        Toolkit.getDefaultToolkit()
                .getSystemClipboard()
                .setContents(username, null); 
        rb.keyPress(KeyEvent.VK_CONTROL); 
        rb.keyPress(KeyEvent.VK_V);  
        rb.keyRelease(KeyEvent.VK_V); 
        rb.keyRelease(KeyEvent.VK_CONTROL);  

        rb.keyPress(KeyEvent.VK_TAB);  
        rb.keyRelease(KeyEvent.VK_TAB); 
        Thread.sleep(2000); 

        StringSelection pwd = new StringSelection(password); 
        Toolkit.getDefaultToolkit()
                .getSystemClipboard()
                .setContents(pwd, null); 
        rb.keyPress(KeyEvent.VK_CONTROL);  
        rb.keyPress(KeyEvent.VK_V);  
        rb.keyRelease(KeyEvent.VK_V); 
        rb.keyRelease(KeyEvent.VK_CONTROL); 

        rb.keyPress(KeyEvent.VK_ENTER);  
        rb.keyRelease(KeyEvent.VK_ENTER); 
        Thread.sleep(2000);  
    }
 
----

==== Robot class 

Creating a Robot object allows performing basic system actions such as pressing keys, moving the mouse or taking screenshots. In this case, it's used to paste login and password text from the clipboard using 'Ctrl + V' shortcut, go to the next field using 'Tab' key and submit by clicking 'Enter'.

=== Toolkit 

Static class Toolkit can perform basic window actions such as scrolling to a specified position or moving context between components. In this case, it's used to set clipboard content to username and password value. 
----
Thread.sleep(long millis) 
----
Web drivers like Selenium perform actions much faster than the normal user. This may cause unexpected consequences e.g. some elements may not be loaded before the driver wants to access them. To avoid this problem you can use Thread.sleep(long millis) to wait given time and let browser load wanted component. 

BEWARE: Using Thread.sleep(long millis) is not the recommended approach. Selenium driver gives methods to wait for a specified element to be enabled or visible with a timeout parameter. This is a more stable and effective way. Also, method waitForPageLoaded() will not solve that issue because it only waits for the ready state from the browser while some javascript actions might be performed after that. 

==== Test Class 

Create a Test class and write a @Test method to execute the scenario. Save parameters as class fields: 
----
@Category({ TestsLocal.class, TestsNONParallel.class })
public class BasicAuthTest extends TheInternetBaseTest {

    private static BasicAuthPage basicAuthPage;

    private String login    = "admin";
    private String password = "admin";
    private String message  = "Congratulations! You must have the proper credentials.";

    @Test
    public void shouldUserLogInWithValidCredentials() throws InterruptedException, AWTException {
        basicAuthPage = shouldTheInternetPageBeOpened().clickBasicAuthLink(); 

        logStep("Enter login and password");
        basicAuthPage.enterLoginAndPassword(login, password); 

        logStep("Verify if user logged in successfully"); 
        assertEquals("Unable to login user with valid credentials", message,
            basicAuthPage.getMessageValue()); 
    }

    @Override
    public void tearDown() {
        logStep("Navigate back to The-Internet page");
        theInternetPage.load(); 
    }
}
 
----
assertEquals(Object expected, Object actual) - test passes if parameters are equal .

===== Alternative scenario: 

There is also a possibility to log in with credentials as a part of URL: http://login:password@the-internet.herokuapp.com/basic_auth 

Another page class method: 
----
/**
     * Authenticates user passing credentials into URL.
     *
     * @param login    User's login
     * @param password User's password
     */
    private void enterLoginAndPasswordByUrl(String login, String password) {
        getDriver().get("http://" + login + ":" + password + "@" + "the-internet.herokuapp.com/" +
            PageSubURLsProjectYEnum.BASIC_AUTH.getValue());
    }
 
----
Another test class method: 
----
@Test
    public void shouldUserLogInWithValidCredentialsSetInURL() {
        logStep("Enter user's credentials into URL to log in");
        basicAuthPage = new BasicAuthPage(login, password);

        logStep("Verify if user logged in successfully");
        assertEquals("Unable to login user with valid credentials", message, 
            basicAuthPage.getMessageValue());
    }
 
----
After running test class as a JUnit test, both test cases will be performed.

