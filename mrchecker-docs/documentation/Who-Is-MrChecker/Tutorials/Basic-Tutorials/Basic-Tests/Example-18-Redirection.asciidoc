:toc: macro

= Tutorial: Handling Redirecting Links

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing


This simple example demonstrates how to handle redirecting links.
When you click on the link, you will be redirected to the Status Codes Page.

image::images/example50.png[]

image::images/example51.png[]

== What You Will Learn

In this tutorial, you will learn:

* How to interact with web pages that contain redirecting links.
* How to create page classes to encapsulate page-specific functionality.
* How to verify if the redirected page has loaded successfully.

== Page Class

=== Redirect Link Page

[source,java]
----
public class RedirectLinkPage extends BasePage {
	private final By selectorRedirectHere = By.cssSelector("a#redirect");

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.REDIRECT.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Redirection' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.REDIRECT.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Clicks 'Redirect here' link.
	 */
	public void clickRedirectHereLink() {
		new Button(selectorRedirectHere).click();
	}
}
----

The `RedirectLinkPage` class is responsible for interacting with the web page.
It includes methods to check if the page is loaded, load the page, and click a link that triggers a redirection to the Status Codes Page.

Additionally, there is a `StatusCodesHomePage` class for handling the redirected page.

=== Status Codes Home Page

[source,java]
----
public class StatusCodesHomePage extends BasePage {
	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.STATUS_CODES.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Status Codes' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.STATUS_CODES.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}
}
----

The `StatusCodesHomePage` class is used to handle the redirected page.
It includes methods to check if the page is loaded and load the page.

== Test Class

Steps:

1. Open Redirection subpage on The Internet Main Page
2. Click the link
3. Check if Status Codes Page is loaded

[source,java]
----
public class RedirectLinkTest extends BaseTest {
	private final RedirectLinkPage		redirectLinkPage	= PageFactory.getPageInstance(RedirectLinkPage.class);
	private final StatusCodesHomePage	statusCodesHomePage	= PageFactory.getPageInstance(StatusCodesHomePage.class);

	@Override
	public void setUp() {
		redirectLinkPage.load();
		BFLogger.logInfo("Verify if Redirect Link page is opened");
		assertTrue(redirectLinkPage.isLoaded(), "Unable to open Redirect Link page");
	}

	@Test
	public void shouldUserBeRedirectedToStatusCodePage() {
		BFLogger.logInfo("Click 'Redirect here' link");
		redirectLinkPage.clickRedirectHereLink();

		BFLogger.logInfo("Verify redirection to Status Code page");
		assertTrue(statusCodesHomePage.isLoaded(), "User hasn't been redirected to the expected website");
	}
}
----

== Conclusion

In this tutorial, you've learned how to handle redirecting links on web pages.
This skill is valuable when dealing with web applications that use redirection for various purposes, such as navigation or authentication.
