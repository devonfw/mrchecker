:toc: macro

= Tutorial: Comparing Dynamic Content

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

This tutorial demonstrates how to compare dynamic content on a web page.

image::images/example18.png[]

Note that after site refresh, some of the content is different.
You can see in the browser's developer mode how the text and image sources are being changed.

image::images/example19.png[]

== What You Will Learn

In this tutorial, you will learn:

* How to interact with dynamic content on a web page.
* How to save information (such as image sources and descriptions) from a web page.
* How to refresh a web page using Selenium WebDriver.
* How to compare content before and after a page refresh to check for differences.

== Steps

1. Open Dynamic Content subpage on The Internet Main Page
2. Save page images sources and descriptions before the refresh
3. Refresh page
4. Save page images sources and it's descriptions after refresh
5. Compare page content before and after refresh and verify if it's different

== Page Class

=== Dynamic Content Page

[source,java]
----
public class DynamicContentPage extends BasePage {
	private final By	imagesLinksSelector			= By.cssSelector("div#content > div.row img");
	private final By	imagesDescriptionsSelector	= By.cssSelector("div#content > div.row div.large-10");

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.DYNAMIC_CONTENT.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Dynamic Content' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.DYNAMIC_CONTENT.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Returns list of picture descriptions being present on the web page.
	 *
	 * @return List of String objects representing descriptions
	 */
	public List<String> getDescriptions() {
		return new ListElements(imagesDescriptionsSelector).getTextList();
	}

	/**
	 * Returns a list of image links being present on the web page.
	 *
	 * @return List of String objects representing paths to pictures
	 */
	public List<String> getImageLinks() {
		return new ListElements(imagesLinksSelector)
				.getList()
				.stream()
				.map(element -> element.getAttribute("src"))
				.collect(Collectors.toList());
	}
}
----

The `DynamicContentPage` class contains methods to interact with the Dynamic Content page.
It includes functionality to retrieve descriptions and image links from the page.

=== ListElements

ListElements is MrChecker collection which can store WebElement Objects.
Constructing ListElements with cssSelector allows you to store every element on the page which fits the selector.
Example methods:

----
getList() -  returns WebElements list,
getTextList() - returns list of contents of each Element,
getSize() - returns number of stored Elements 
In getImageLinks() example it's shown how to get a list of specified Elements' attributes. 
----

== Test Class

[source,java]
----
public class DynamicContentTest extends BaseTest {
	private final DynamicContentPage dynamicContentPage = PageFactory.getPageInstance(DynamicContentPage.class);

	@Override
	public void setUp() {
		dynamicContentPage.load();
		BFLogger.logInfo("Verify if Dynamic Content page is opened");
		assertTrue(dynamicContentPage.isLoaded(), "Unable to open Dynamic Content page");
	}

	@Test
	public void shouldImagesAndDescriptionsDifferAfterRefresh() {

		BFLogger.logInfo("Read images and descriptions before refresh");
		List<String> descriptionsBeforeRefresh = dynamicContentPage.getDescriptions();
		List<String> imagesBeforeRefresh = dynamicContentPage.getImageLinks();

		BFLogger.logInfo("Refresh page");
		dynamicContentPage.refreshPage();
		assertTrue(dynamicContentPage.isLoaded(), "The Dynamic Content page hasn't been refreshed");

		BFLogger.logInfo("Read images and descriptions after refresh");
		List<String> descriptionsAfterRefresh = dynamicContentPage.getDescriptions();
		List<String> imagesAfterRefresh = dynamicContentPage.getImageLinks();

		BFLogger.logInfo("Verify if descriptions are different after refresh");
		assertEquals(descriptionsAfterRefresh.size(), descriptionsBeforeRefresh.size(),
				"Different number of descriptions before and after refresh");

		boolean diversity = false;
		for (int i = 0; i < descriptionsAfterRefresh.size(); i++) {
			if (!descriptionsAfterRefresh.get(i)
					.equals(descriptionsBeforeRefresh.get(i))) {
				diversity = true;
				break;
			}
		}
		assertTrue(diversity,
				"There are no differences between descriptions before and after refresh");

		BFLogger.logInfo("Verify if images are different after refresh");
		assertEquals(imagesAfterRefresh.size(), imagesBeforeRefresh.size(),
				"Different number of descriptions before and after refresh");

		diversity = false;
		for (int i = 0; i < imagesAfterRefresh.size(); i++) {
			if (!imagesAfterRefresh.get(i)
					.equals(imagesBeforeRefresh.get(i))) {
				diversity = true;
				break;
			}
		}
		assertTrue(diversity, "There are no differences between images before and after refresh");
	}
}
----

In the test method, during differences verification, the goal is to compare every element from the first and second list and find first diversity.

== Conclusion

In this tutorial, you've learned how to interact with dynamic content on a web page, save information, refresh a web page, and compare content before and after a page refresh to identify differences.