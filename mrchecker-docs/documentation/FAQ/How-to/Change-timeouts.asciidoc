= How to: Change timeouts?

If you would like to change timeouts - you don't have to change them globally.
It is possible to add waiting time parameter to searching methods, such as:

`getDriver().findElementDynamic(By selector, int timeOut)` +
timeout - in seconds

It is recommended to use methods that significantly level up the repetitiveness of the code:

----
getDriver().waitForElement(By selector);

getDriver().waitForElementVisible(By selector);

getDriver().waitForPageLoaded();

getDriver().waitUntilElementIsClickable(By selector);
----

Or Fluent Wait methods with changed timeout and interval: 
----
FluentWait<WebDriver> wait = new FluentWait<WebDriver>(getDriver())
        .withTimeout(long duration, TimeUnit unit)
        .pollingEvery(long duration, TimeUnit unit); 
wait.until((WebDriver wd) -> expectedCondition.isTrue());
getWebDriverWait().withTimeout(millis, TimeUnit.MILLISECONDS)
        .withTimeout(long duration, TimeUnit unit)
        .pollingEvery(long duration, TimeUnit unit)
        .until((WebDriver wd) -> expectedCondition.isTrue());
----

These methods allow You to change WebDriver timeouts values such as: 

`getDriver().manage().timeouts().pageLoadTimeout(long time, TimeUnit unit)` +
the amount of time to wait for a page to load before throwing an exception. This is the default timeout for `method getDriver().waitForPageLoaded()`

`getDriver().manage().timeouts().setScriptTimeout(long time, TimeUnit unit)` +
the amount of time to wait for execution of script to finish before throwing an exception

`getDriver().manage().timeouts().implicitlyWait(long time, TimeUnit unit)`
the amount of time the driver should wait when searching for an element if it is not immediately present. After that time, it throws an exception. This the default timeout for methods such as `getDriver().findElementDynamic(By selector)` or `getDriver().waitForElement(By selector)`

Changing timeouts can improve test stability but can also make test run time longer. 

