= Tests are not stable

Selenium tests perform actions much faster than a normal user would. Because pages can contain dynamically changing content, some web elements can still not be loaded when Selenium driver tries to access them. 

`getDriver().waitForPageLoaded()` method checks ready state in the browser, that's why stability problems may happen in advanced frontend projects. 

To improve test stability you can: 

* add waiting methods before dynamically loading elements e.g. `getDriver().waitForElement(By selector)`
* add timeout parameter in `method getDriver().findElementDynamic(By selector, int timeOut)`
* change global waiting timeout value using method `getDriver().manage().timeouts().implicitlyWait(long time, TimeUnit unit)`

Furthermore, if the page displays visible loading bars or spinners, create FluentWait method to wait until they disappear. 

Notice that by increasing timeouts you may improve stability but too long waiting time makes tests run slower. 

Learn more from tutorials: +
https://capgemini.sharepoint.com/sites/Mr-Checker/SitePages/Example-10--Dynamicly-Loading-Elements.aspx[Example 10: Dynamically loaded Elements] +
https://capgemini.sharepoint.com/sites/Mr-Checker/SitePages/Example-11--Exit-intent.aspx[Example 11: Exit intent] +
https://capgemini.sharepoint.com/sites/Mr-Checker/SitePages/Example-12-.aspx[Example 12: File download test] 
