:toc: macro

= Tutorial: Moving Draggable Elements on a Page

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== What You Will Learn

In this tutorial, you will learn:

* How to perform drag-and-drop operations on draggable elements.
* How to interact with elements in different containers.
* How to observe changes in the DOM while dragging elements.

== Example

image::images/example13.png[]

Try to move A to B position and see what happens.
Also, open browser developer mode and see how the DOM changes.

image::images/example14.png[]

The page can easily be broken.
You can try to do so and check how the page structure changed in browser developer mode.

image::images/example15.png[]

Steps:

1. Open Drag and Drop subpage on The Internet Main Page
2. Check if the Drag and Drop message is visible
3. Check if element A is in container A and B in container B
4. Move element A to position B
5. Check if element A is in container B and B in container A
6. Move element B to position A
7. Again check if element A is in container A and B in container B

== Page Class

=== Drag and Drop Page

[source,java]
----
public class DragAndDropPage extends BasePage {
	private static final By	selectorDragAndDropText		= By.cssSelector("div#content h3");
	private static final By	selectorAElementContainer	= By.cssSelector("div#column-a");
	private static final By	selectorBElementContainer	= By.cssSelector("div#column-b");
	private static final By	selectorDescriptionElement	= By.cssSelector("header");

	private static final String dndHelperPath = "src/test/resources/js/drag_and_drop_helper.js";

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.DRAG_AND_DROP.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Drag and Drop' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() + PageSubURLsProjectYEnum.DRAG_AND_DROP.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Returns information if drag and drop message is visible or not.
	 *
	 * @return true if exit drag and drop message was found on web page.
	 */
	public boolean isDragAndDropMessageVisible() {
		return getDriver().findElementDynamic(selectorDragAndDropText)
				.isDisplayed();
	}

	/**
	 * Verifies if specified element is placed in designated container.
	 *
	 * @param element
	 *            WebElement to be verified.
	 * @return true if element described as A exists in container A or element B exists in container B, false otherwise.
	 */
	public boolean isElementPlacedInCorrectContainer(String element) {
		return getDescriptionElement(findElementByDescription(element)).getText()
				.equals(element);
	}

	private WebElement findElementByDescription(String element) {
		WebElement result;
		switch (element) {
			case "A":
				result = getContainerElement(selectorAElementContainer);
				break;
			case "B":
				result = getContainerElement(selectorBElementContainer);
				break;
			default:
				result = null;
				BFLogger.logDebug("Chosen element doesn't exist on web page");
		}
		return result;
	}

	private WebElement getContainerElement(By container) {
		return getDriver().findElementDynamic(container);
	}

	private WebElement getDescriptionElement(WebElement container) {
		return container.findElement(selectorDescriptionElement);
	}

	/**
	 * Drags element to designated container and drops it.
	 *
	 * @param element
	 *            String describing WebElement expected to be dragged.
	 * @param from
	 *            String describing WebElement representing container of element expected to be dragged.
	 * @param destinationDesc
	 *            String describing WebElement representing destination container where other element will be dragged.
	 */
	public void dragElementToPosition(String element, String from, String destinationDesc) {
		WebElement source = findElementByDescription(from);
		WebElement description = getDescriptionElement(source);
		WebElement destination = findElementByDescription(destinationDesc);
		if (description.getText()
				.equals(element))
			getAction().dragAndDrop(source, destination)
					.build()
					.perform();
	}
}
----

The `DragAndDropPage` class contains methods to interact with the Drag and Drop page.
It includes functionality to check if the Drag and Drop message is visible, verify the placement of elements in containers, and perform drag-and-drop operations.

=== JavascriptExecutor and Drag-and-Drop Helper

Since HTML5, normal Selenium drag-and-drop action may not work as expected, thus it's necessary to execute Javascript which performs the drag-and-drop.
If you are facing this issue, create a JavascriptExecutor object, then read the script from a file drag_and_drop_helper.js and execute it with additional arguments using method executeScript(String script).

An example drag-and-drop solution:

----
    /**
     * Drags and drops given WebElement to it's destination location.
     * <p>
     * Since HTML5 all Selenium Actions performing drag and drop operations may not work as expected, e.g.
     * original implementation, which was:
     * <code>
     * BasePage.getAction()
     * .clickAndHold(draggable)
     * .moveToElement(target)
     * .release()
     * .build()
     * .perform();
     * </code>
     * finishes with no effect. For this reason, there is javaScript function used, to make sure that
     * drag and drop operation will be successful.
     * JavaScript function is stored under the following path: 'src/test/resources/js/drag_and_drop_helper.js'.
     * Original source of the script:
     * <a href="https://gist.github.com/rcorreia/2362544">drag_and_drop_helper</a>
     * </p>
     *
     * @param draggable A WebElement to be dragged and dropped.
     * @param target    A destination, where element will be dropped.
     * @see JavascriptExecutor
     * @see Actions
     */
    private void dragElement(WebElement draggable, WebElement target) {
        JavascriptExecutor js;
        INewWebDriver driver = getDriver();
        List<String> fileContent;
        String draggableId = draggable.getAttribute("id");
        String targetId = target.getAttribute("id");
        String script = null;
        if (draggable.getAttribute("draggable")
                .contains("true")) {
            if (driver instanceof JavascriptExecutor) {
                js = (JavascriptExecutor) driver;
                Path path = Paths.get(dndHelperPath);
                try {
                    fileContent = Files.readAllLines(path);
                    script = fileContent.stream()
                            .collect(Collectors.joining());
                } catch (IOException e) {
                    BFLogger.logDebug("Unable to read file content: " + e.getMessage());
                }
                if (script != null && !script.isEmpty()) {
                    String arguments = "$('#%s').simulateDragDrop({ dropTarget: '#%s'});";
                    js.executeScript(script + String.format(arguments, draggableId, targetId));
                }
            }
        }
    }
 
----

Drag and Drop helper file:

[source,js]
----
(function( $ ) {
        $.fn.simulateDragDrop = function(options) {
                return this.each(function() {
                        new $.simulateDragDrop(this, options);
                });
        };
        $.simulateDragDrop = function(elem, options) {
                this.options = options;
                this.simulateEvent(elem, options);
        };
        $.extend($.simulateDragDrop.prototype, {
                simulateEvent: function(elem, options) {
                        /*Simulating drag start*/
                        var type = 'dragstart';
                        var event = this.createEvent(type);
                        this.dispatchEvent(elem, type, event);

                        /*Simulating drop*/
                        type = 'drop';
                        var dropEvent = this.createEvent(type, {});
                        dropEvent.dataTransfer = event.dataTransfer;
                        this.dispatchEvent($(options.dropTarget)[0], type, dropEvent);

                        /*Simulating drag end*/
                        type = 'dragend';
                        var dragEndEvent = this.createEvent(type, {});
                        dragEndEvent.dataTransfer = event.dataTransfer;
                        this.dispatchEvent(elem, type, dragEndEvent);
                },
                createEvent: function(type) {
                        var event = document.createEvent("CustomEvent");
                        event.initCustomEvent(type, true, true, null);
                        event.dataTransfer = {
                                data: {
                                },
                                setData: function(type, val){
                                        this.data[type] = val;
                                },
                                getData: function(type){
                                        return this.data[type];
                                }
                        };
                        return event;
                },
                dispatchEvent: function(elem, type, event) {
                        if(elem.dispatchEvent) {
                                elem.dispatchEvent(event);
                        }else if( elem.fireEvent ) {
                                elem.fireEvent("on"+type, event);
                        }
                }
        });
})(jQuery);
 
----

== Test Class

[source,java]
----
public class DragAndDropTest extends BaseTest {
	private final DragAndDropPage dragAndDropPage = PageFactory.getPageInstance(DragAndDropPage.class);

	private final String	ELEMENT_A	= "A";
	private final String	CONTAINER_A	= "A";
	private final String	ELEMENT_B	= "B";
	private final String	CONTAINER_B	= "B";

	@Override
	public void setUp() {
		dragAndDropPage.load();
		BFLogger.logInfo("Verify if Drag And Drop page is opened");
		assertTrue(dragAndDropPage.isLoaded(), "Unable to open Drag And Drop page");

		BFLogger.logInfo("Verify if Drag And Drop message is visible");
		assertTrue(dragAndDropPage.isDragAndDropMessageVisible(), "Drag And Drop message is not visible");
	}

	@Test
	public void shouldDraggableElementBeMovedAndDropped() {
		BFLogger.logInfo("Verify if elements are placed in proper containers");
		assertTrue(dragAndDropPage.isElementPlacedInCorrectContainer(ELEMENT_A), "Element A doesn't exist in container A");
		assertTrue(dragAndDropPage.isElementPlacedInCorrectContainer(ELEMENT_B), "Element B doesn't exist in container B");

		BFLogger.logInfo("Step 7: Drag and drop element A into container B");
		dragAndDropPage.dragElementToPosition(ELEMENT_A, CONTAINER_A, CONTAINER_B);

		BFLogger.logInfo("Step 8: Verify if elements are placed in improper containers");
		assertFalse(dragAndDropPage.isElementPlacedInCorrectContainer(ELEMENT_A), "Element A doesn't exist in container B");
		assertFalse(dragAndDropPage.isElementPlacedInCorrectContainer(ELEMENT_B), "Element B doesn't exist in container A");

		BFLogger.logInfo("Drag and drop element B back into container B");
		dragAndDropPage.dragElementToPosition(ELEMENT_A, CONTAINER_B, CONTAINER_A);

		BFLogger.logInfo("Verify if elements are placed in proper containers");
		assertTrue(dragAndDropPage.isElementPlacedInCorrectContainer(ELEMENT_A), "Element A doesn't exist in container A");
		assertTrue(dragAndDropPage.isElementPlacedInCorrectContainer(ELEMENT_B), "Element B doesn't exist in container B");
	}
}
----

In the test method `shouldDraggableElementBeMovedAndDropped()`, the goal is to move draggable elements between containers, observe changes in the DOM, and ensure that the elements are placed in their intended containers.

== Conclusion

In this tutorial, you've learned how to perform drag-and-drop operations on draggable elements, interact with elements in different containers, and observe changes in the DOM while moving elements.
