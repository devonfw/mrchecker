:toc: macro

= Tutorial: Automating Dynamic Elements

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== What you will learn

In this tutorial, you will learn how to interact with dynamically appearing elements on a web page

image::images/example40.png[]

This example demonstrates how to approach elements that dynamically appear after a user's action.
To understand this concept better, let's simulate a scenario where we move the mouse over an image to reveal an additional label.

image::images/example41.png[]

In some cases, elements may exist in the page's Document Object Model (DOM) all the time, but their display attributes change dynamically.
Importantly, there is no JavaScript involved, and the elements' visibility is managed by Cascading Style Sheets (CSS).

image::images/example42.png[]

== Page Class

[source,java]
----
public class HoversPage extends BasePage {
	private final By	selectorImages	= By.cssSelector("div.figure > img");
	private final By	selectorNames	= By.cssSelector("div.figcaption h5");

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.HOVERS.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Hovers' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.HOVERS.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Moves mouse pointer over an image with given index.
	 *
	 * @param index
	 *            An index of the picture, where mouse pointer should be moved
	 */
	public void hoverOverAvatar(int index) {
		WebElement avatarImage = getDriver().findElementDynamics(selectorImages)
				.get(index);
		getAction().moveToElement(avatarImage)
				.perform();
	}

	/**
	 * Returns the information displayed under a picture with given index.
	 *
	 * @param index
	 *            An index of the picture, where the information should be read
	 * @return String object representing picture's information
	 */
	public String getAvatarsInformation(int index) {
		return getDriver().findElementDynamics(selectorNames)
				.get(index)
				.getText();
	}
}
----

The `HoversPage` class is responsible for interacting with the web page.
It includes methods to check if the page is loaded, load the page, and perform actions such as hovering the mouse over images and retrieving information from the page.

== Actions

Actions class contains methods used to execute basic user actions such as mouse moving and clicking or keys sending.
Action or actions series will be performed after calling `perform()` method.

== Test Class

Steps:

1. Open Hovers subpage on The Internet Main Page
2. Move mouse over random image
3. Check if displayed text is equal to expected.

[source,java]
----
public class HoversTest extends BaseTest {
	private final HoversPage	hoversPage	= PageFactory.getPageInstance(HoversPage.class);
	private final String[]		names		= { "name: user1", "name: user2", "name: user3" };

	@Override
	public void setUp() {
		hoversPage.load();
		BFLogger.logInfo("Verify if Hovers page is opened");
		assertTrue(hoversPage.isLoaded(), "Unable to open Hovers page");
	}

	@Test
	public void shouldProperInformationBeDisplayedWhenMousePointerHoveredOverRandomElement() {
		int randomIndex = new Random().nextInt(names.length);

		BFLogger.logInfo("Hover mouse pointer over random element");
		hoversPage.hoverOverAvatar(randomIndex);
		assertEquals(names[randomIndex], hoversPage.getAvatarsInformation(randomIndex),
				"Picture's information is different than expected");
	}
}
----

== Conclusion

In this tutorial, you have learned how to automate interactions with dynamically appearing elements on a web page.
You now have the skills to handle scenarios where elements change based on user actions, enhancing your web automation capabilities.