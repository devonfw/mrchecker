:toc: macro

= Tutorial: Dynamic Loading of Web Elements

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

This tutorial demonstrates how to test a web page with dynamically loading content.
Some elements don't load during the initial page load but are loaded via JavaScript execution.

== What You Will Learn

In this tutorial, you will learn:

* How to interact with dynamically loading elements on a web page.
* How to wait for elements to appear or disappear using WebDriverWait.
* How to validate the visibility and attributes of elements.
* How to simulate user actions like clicking buttons.
* How to navigate back to the previous page.

== Steps

image::images/example23.png[]

Go to Example 1:

image::images/example24.png[]

Click "start" and see what happens:

image::images/example25.png[]

When loading ends, you should see the following message:

image::images/example26.png[]

In the developer mode, you can see that the element with the "Hello World!" message exists in page DOM, but it's not displayed.
However, the loading bar does not exist there - it's created by JavaScript.
The script is also visible in developer mode:

image::images/example27.png[]

After clicking the "Start" button, the element "Loading" is created by the script, and the "Start" button becomes invisible.
When loading ends, "Hello World" message is displayed and the loading bar is hidden.
Follow the changes the in developer mode:

image::images/example28.png[]

Go to example 2:
From a user perspective, there is no difference in page functioning.
However, in this case the element with the "Hello World!" message does not exist on the page before clicking "Start".
It's created by the script.

image::images/example29.png[]

After clicking "Start", the element with the loading bar has been created.

image::images/example30.png[]

After a certain time, the loading bar becomes invisible, and then the script creates "Hello World!" element and displays it.

image::images/example31.png[]

== Page Class

=== Dynamic Loading Page

[source,java]
----
public class DynamicLoadingPage extends BasePage {
	private final By	selectorExampleOneLink		= By.cssSelector("a[href*='dynamic_loading/1']");
	private final By	selectorExampleTwoLink		= By.cssSelector("a[href*='dynamic_loading/2']");
	private final By	selectorDynamicLoadingText	= By.cssSelector("div#content h3");
	private final By	selectorStartButton			= By.cssSelector("div#start button");
	private final By	selectorLoadingBar			= By.cssSelector("div#loading");
	private final By	selectorExampleText			= By.cssSelector("div#finish h4");

	@Override
	public boolean isLoaded() {
		getDriver().waitForPageLoaded();
		return getDriver().getCurrentUrl()
				.contains(PageSubURLsProjectYEnum.DYNAMIC_LOADING.getValue());
	}

	@Override
	public void load() {
		BFLogger.logDebug("Load 'Dynamically Loaded Page Elements' page.");
		getDriver().get(GetEnvironmentParam.THE_INTERNET_HEROKUAPP_URL.getValue() +
				PageSubURLsProjectYEnum.DYNAMIC_LOADING.getValue());
		getDriver().waitForPageLoaded();
	}

	@Override
	public String pageTitle() {
		return getActualPageTitle();
	}

	/**
	 * Returns information if dynamic loading message is visible or not.
	 *
	 * @return true if dynamic loading message was found on web page.
	 */
	public boolean isDynamicLoadingMessageVisible() {
		return getDriver().findElementDynamic(selectorDynamicLoadingText)
				.isDisplayed();
	}

	/**
	 * Clicks Example 1 link.
	 */
	public void clickExampleOneLink() {
		getDriver().findElementDynamic(selectorExampleOneLink)
				.click();
	}

	/**
	 * Clicks Example 2 link.
	 */
	public void clickExampleTwoLink() {
		getDriver().findElementDynamic(selectorExampleTwoLink)
				.click();
	}

	/**
	 * Returns information if Start button is visible or not.
	 *
	 * @return true if Start button was found on web page.
	 */
	public boolean isStartButtonVisible() {
		return getDriver().findElementDynamic(selectorStartButton)
				.isDisplayed();
	}

	/**
	 * Clicks Start button.
	 */
	public void clickStartButton() {
		getDriver().findElementDynamic(selectorStartButton)
				.click();
	}

	/**
	 * Waits until WebElement representing waiting bar disappears and returns example text.
	 *
	 * @param waitTime
	 *            The amount of seconds designated for waiting until waiting bar disappears.
	 * @return String representing example's text.
	 */
	public String getExampleOneDynamicText(int waitTime) {
		WebDriverWait wait = new WebDriverWait(getDriver(), Duration.ofSeconds(waitTime));
		wait.until(
				ExpectedConditions.invisibilityOfElementLocated(selectorLoadingBar));
		return getDriver().findElementDynamic(selectorExampleText)
				.getText();
	}

	/**
	 * Returns example text.
	 * <p>
	 * Waits until WebElement representing waiting bar disappear. Then waits until example text
	 * shows up.
	 * And after that returns example text.
	 * </p>
	 *
	 * @param waitTime
	 *            The amount of seconds designated for waiting until waiting bar disappears and
	 *            example text shows.
	 * @return String representing example's text.
	 */
	public String getExampleTwoDynamicText(int waitTime) {
		WebDriverWait wait = new WebDriverWait(getDriver(), Duration.ofSeconds(waitTime));
		wait.until(ExpectedConditions.invisibilityOfElementLocated(selectorLoadingBar));
		wait.until(ExpectedConditions.visibilityOfElementLocated(selectorExampleText));
		return getDriver().findElementDynamic(selectorExampleText)
				.getText();
	}
}
----

The `DynamicLoadingPage` class contains methods to interact with the Dynamic Loading page, such as clicking Example 1 and Example 2 links, checking the visibility of the "Start" button, and retrieving dynamic text after clicking "Start."

=== WebDriverWait

This class performs waiting for actions using Selenium Web Driver:

* WebDriverWait(WebDriver driver, Duration timeout) - constructor, first parameter takes WebDriver, second parameter allows you to specify a timeout duration.
This duration defines the maximum amount of time that the wait operation will continue, waiting for the expected condition to be met.

Here's how to use it:

----
// Create a WebDriverWait instance with a timeout of 10 seconds
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
----

In this example, a `WebDriverWait` instance named `wait` is created with a timeout of 10 seconds.
This means that if the expected condition is not met within 10 seconds, a `TimeoutException` will be thrown, and the wait operation will terminate.

By setting an appropriate timeout duration, you can balance between allowing enough time for elements to appear or conditions to be met and not waiting excessively long in case of unexpected issues.
It's essential to choose a timeout duration that suits your specific test scenarios and the expected behavior of the web elements you are interacting with.

By providing a more precise duration, you can ensure that your tests wait for the right amount of time, optimizing test efficiency and reliability.

[WARNING]
====
Setting excessively long timeouts may slow down your test execution and might hide potential issues with your web application's performance.
Conversely, overly short timeouts can lead to false test failures.
It's crucial to find the right balance in timeout settings.
====

FluentWait method:

* until(Function<? super T, V> isTrue) - waits until condition function given as parameter returns expected value.
If waiting time reaches timeout, it throws timeoutException.

MrChecker implements various condition functions in the ExpectedConditions class :

* visibilityOfElementLocated(By selector) - returns WebElement if it's visible
* invisibilityOfElementLocated(By selector) - returns true if Element under given selector is invisible

WebDriver also has methods which wait for some conditions:

* waitForElement(By selector)
* waitForElementVisible(By selector)
* waitUntilElementClickable(By selector)

It's possible to write your own condition function e.g.:

----
  public static ExpectedCondition<Boolean> invisibilityOfElementLocated(final By locator) {
    return new ExpectedCondition<Boolean>() {
      @Override
      public Boolean apply(WebDriver driver) {
        try {
          return !(findElement(locator, driver).isDisplayed());
        } catch (NoSuchElementException e) {
          return true;
        } catch (StaleElementReferenceException e) {
          return true;
        }
      }
    };
  }
----

Or as a lambda expression:

----
        WebDriverWait wait = new WebDriverWait(getDriver(), Duration.ofSeconds(waitTime));
        wait.until((WebDriver driver) -> {
            try {
                return !(driver.findElement(selectorExampleText)
                        .isDisplayed());
            } catch (NoSuchElementException e) {
                return true;
            } catch (StaleElementReferenceException e) {
                return true;
            }
        });
----

== Test Class

*First case steps:*

1. Open Dynamic Loading subpage on The Internet Main Page
2. Check if the page is loaded and "Dynamically Loaded Page Elements" header is visible
3. Click Example 1 link and load site
4. Verify if the "Start" button is visible
5. Click "Start"
6. Wait for the loading bar to disappear and check if the displayed message is as it should be

*Second case steps:*

1. Open Dynamic Loading subpage on The Internet Main Page
2. Check if the page is loaded and "Dynamically Loaded Page Elements" header is visible
3. Click Example 2 link and load site
4. Verify if the "Start" button is visible
5. Click "Start"
6. Wait for the loading bar to disappear
7. Wait for the message to appear and check if it is as it should be

[source,java]
----
public class DynamicLoadingTest extends BaseTest {
	private final DynamicLoadingPage dynamicLoadingPage = PageFactory.getPageInstance(DynamicLoadingPage.class);

	private final int		EXAMPLE_WAITING_TIME	= 30;
	private final String	EXAMPLE_TEXT			= "Hello World!";

	@Override
	public void setUp() {
		dynamicLoadingPage.load();
		BFLogger.logInfo("Verify if Dynamic Loading page is opened");
		assertTrue(dynamicLoadingPage.isLoaded(), "Unable to open Dynamic Loading page");

		BFLogger.logInfo("Verify if dynamic loading message is visible");
		assertTrue(dynamicLoadingPage.isDynamicLoadingMessageVisible(),
				"Dynamic loading message is invisible");
	}

	@Test
	public void shouldExampleTextBeDisplayedAfterRunExampleOne() {
		BFLogger.logInfo("Click Example 1 link");
		dynamicLoadingPage.clickExampleOneLink();

		BFLogger.logInfo("Verify if Example 1 link opened content");
		assertTrue(dynamicLoadingPage.isStartButtonVisible(), "Fail to load Example 1 content");

		BFLogger.logInfo("Click Start button");
		dynamicLoadingPage.clickStartButton();

		BFLogger.logInfo("Verify if expected text is displayed on the screen");
		assertEquals(EXAMPLE_TEXT, dynamicLoadingPage.getExampleOneDynamicText(EXAMPLE_WAITING_TIME),
				"Fail to display example text");
	}

	@Test
	public void shouldExampleTextBeDisplayedAfterRunExampleTwo() {
		BFLogger.logInfo("Click Example 2 link");
		dynamicLoadingPage.clickExampleTwoLink();

		BFLogger.logInfo("Verify if Example 2 link opened content");
		assertTrue(dynamicLoadingPage.isStartButtonVisible(), "Fail to load Example 2 content");

		BFLogger.logInfo("Click Start button");
		dynamicLoadingPage.clickStartButton();

		BFLogger.logInfo("Verify if expected text is displayed on the screen");
		assertEquals(EXAMPLE_TEXT,
				dynamicLoadingPage.getExampleTwoDynamicText(EXAMPLE_WAITING_TIME), "Fail to display example text");
	}
}
----

Perform both cases running Test Class as JUnit Test.

*WARNING:* In this example, there is a visible loading bar signalizing that content is loading.On many websites elements are created by scripts without clear communication.
This may cause problems with test stability.
When your tests aren't finding page elements, try to add wait functions with a short timeout.

== Conclusion

In this tutorial, you've learned how to handle dynamically loading web elements, validate their visibility, and perform user actions like clicking buttons.
You've also seen how to navigate back to the previous page when needed.