= Project organization

== Importing projects 

Every MrChecker project should be imported as a Maven Project.

Example from Eclipse IDE:

image::images/1.png[]

image::images/2.png[]

Enter the project path and select projects to import.

image::images/3.png[]

When the import is finished, update the project structure - ALT + F5

image::images/4.png[]

== Exporting projects

In order to create a new standalone MrChecker project, you can use template-app-under-test and export it to the new folder:

image::images/6.png[]

Create a new folder for the project and enter its path.
Select project and files to export:

image::images/7.png[]

Change project name and other properties, if necessary, in pom.xml file:

image::images/8.png[]

Then you can import the project to the workspace and create new packages and classes.

== Creating new packages

1. You will need two new packages: one for the new page classes, the other one for test classes:

* Create a package for page classes

- Open Eclipse
- Use the "Project Explorer" on the left
- Navigate to [your-project] → src/main/java → com.capgemini.mrchecker → selenium
- Right-click on "selenium"
- Click on "New" → New Package
- Name the new package "com.capgemini.mrchecker.selenium.pages.[your-product-name]"

* Create a package for test classes

- Navigate to [your-project] → src/test/java → com.capgemini.mrchecker → selenium
- Right click on "selenium"
- Click on "New" → New Package
- Name the new package "com.capgemini.mrchecker.selenium.tests.[your-product-name]"

Example:

image::images/9.png[]

== Creating new Page Classes

- Navigate to: [your-project] → src/main/java → com.capgemini.mrchecker → selenium.pages.[your-product-name]
- Click on "New" → New Class
- Enter the name "YourPage"

Every Page Class should extend BasePage class.
Import all necessary packages and override all required methods:

* public boolean isLoaded() - returns true if the page is loaded and false if not
* public void load() - loads the page
* public String pageTitle() - returns page title

Example:

[source,java]
----
 public class MainPage extends BasePage {

    @Override
    public boolean isLoaded() {
        return false; 
    }
    
    @Override
    public void load() {
        BFLogger.logDebug("Load 'Main Page'"); 
    }
    
    @Override
    public String pageTitle() {
        return "Main Page Title"; 
    }
 }
----

== Creating new Test Classes

- Navigate to  [your-project] → src/test/java → com.capgemini.mrchecker → selenium.tests.[your-product-name]
- Click on "New" → New Class
- Enter the name "YourCaseTest"

Test classes should extend BaseTest class, import all necessary packages and override all required methods:

* public void setUp() - executes before each test
* public void tearDown() - executes after each test

Optionally, it is also possible to implement the following methods:

* @BeforeAll public static void setUpBeforeAll() - runs only once before all tests
* @AfterAll public static void tearDownAfterAll() - runs only once after performing all tests

Every test method has to be signed with "@Test" parameter.

[source,java]
----
 import com.capgemini.mrchecker.selenium.example.page.MainPage;
import com.capgemini.mrchecker.test.core.BaseTest;
import com.capgemini.mrchecker.test.core.utils.PageFactory;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Test;

public class YourCaseTest extends BaseTest {
	private final MainPage mainPage = PageFactory.getPageInstance(MainPage.class);

	// This method is executed once before all test methods in the class.
	@BeforeAll
	public static void setUpBeforeAll() {

	}

	// This method is executed once after all test methods in the class.
	@AfterAll
	public static void tearDownAfterAll() {

	}

	// This method is executed before each test method in the class.
	@Override
	public void setUp() {
		// Load the main page before each test.
		mainPage.load();
	}

	// This method is executed after each test method in the class.
	@Override
	public void tearDown() {

	}

	// This is a sample test method.
	@Test
	public void shouldTestRunWithoutReturningError() {
		// Add test logic here
	}
}
----

== Running Tests

Run the test by right-clicking on the test method → Run as → JUnit test.

